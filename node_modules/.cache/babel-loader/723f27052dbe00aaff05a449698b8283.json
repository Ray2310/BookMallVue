{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport RadiusAxis from './RadiusAxis.js';\nimport AngleAxis from './AngleAxis.js';\nexport var polarDimensions = ['radius', 'angle'];\n\nvar Polar =\n/** @class */\nfunction () {\n  function Polar(name) {\n    this.dimensions = polarDimensions;\n    this.type = 'polar';\n    /**\r\n     * x of polar center\r\n     */\n\n    this.cx = 0;\n    /**\r\n     * y of polar center\r\n     */\n\n    this.cy = 0;\n    this._radiusAxis = new RadiusAxis();\n    this._angleAxis = new AngleAxis();\n    this.axisPointerEnabled = true;\n    this.name = name || '';\n    this._radiusAxis.polar = this._angleAxis.polar = this;\n  }\n  /**\r\n   * If contain coord\r\n   */\n\n\n  Polar.prototype.containPoint = function (point) {\n    var coord = this.pointToCoord(point);\n    return this._radiusAxis.contain(coord[0]) && this._angleAxis.contain(coord[1]);\n  };\n  /**\r\n   * If contain data\r\n   */\n\n\n  Polar.prototype.containData = function (data) {\n    return this._radiusAxis.containData(data[0]) && this._angleAxis.containData(data[1]);\n  };\n\n  Polar.prototype.getAxis = function (dim) {\n    var key = '_' + dim + 'Axis';\n    return this[key];\n  };\n\n  Polar.prototype.getAxes = function () {\n    return [this._radiusAxis, this._angleAxis];\n  };\n  /**\r\n   * Get axes by type of scale\r\n   */\n\n\n  Polar.prototype.getAxesByScale = function (scaleType) {\n    var axes = [];\n    var angleAxis = this._angleAxis;\n    var radiusAxis = this._radiusAxis;\n    angleAxis.scale.type === scaleType && axes.push(angleAxis);\n    radiusAxis.scale.type === scaleType && axes.push(radiusAxis);\n    return axes;\n  };\n\n  Polar.prototype.getAngleAxis = function () {\n    return this._angleAxis;\n  };\n\n  Polar.prototype.getRadiusAxis = function () {\n    return this._radiusAxis;\n  };\n\n  Polar.prototype.getOtherAxis = function (axis) {\n    var angleAxis = this._angleAxis;\n    return axis === angleAxis ? this._radiusAxis : angleAxis;\n  };\n  /**\r\n   * Base axis will be used on stacking.\r\n   *\r\n   */\n\n\n  Polar.prototype.getBaseAxis = function () {\n    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAngleAxis();\n  };\n\n  Polar.prototype.getTooltipAxes = function (dim) {\n    var baseAxis = dim != null && dim !== 'auto' ? this.getAxis(dim) : this.getBaseAxis();\n    return {\n      baseAxes: [baseAxis],\n      otherAxes: [this.getOtherAxis(baseAxis)]\n    };\n  };\n  /**\r\n   * Convert a single data item to (x, y) point.\r\n   * Parameter data is an array which the first element is radius and the second is angle\r\n   */\n\n\n  Polar.prototype.dataToPoint = function (data, clamp) {\n    return this.coordToPoint([this._radiusAxis.dataToRadius(data[0], clamp), this._angleAxis.dataToAngle(data[1], clamp)]);\n  };\n  /**\r\n   * Convert a (x, y) point to data\r\n   */\n\n\n  Polar.prototype.pointToData = function (point, clamp) {\n    var coord = this.pointToCoord(point);\n    return [this._radiusAxis.radiusToData(coord[0], clamp), this._angleAxis.angleToData(coord[1], clamp)];\n  };\n  /**\r\n   * Convert a (x, y) point to (radius, angle) coord\r\n   */\n\n\n  Polar.prototype.pointToCoord = function (point) {\n    var dx = point[0] - this.cx;\n    var dy = point[1] - this.cy;\n    var angleAxis = this.getAngleAxis();\n    var extent = angleAxis.getExtent();\n    var minAngle = Math.min(extent[0], extent[1]);\n    var maxAngle = Math.max(extent[0], extent[1]); // Fix fixed extent in polarCreator\n    // FIXME\n\n    angleAxis.inverse ? minAngle = maxAngle - 360 : maxAngle = minAngle + 360;\n    var radius = Math.sqrt(dx * dx + dy * dy);\n    dx /= radius;\n    dy /= radius;\n    var radian = Math.atan2(-dy, dx) / Math.PI * 180; // move to angleExtent\n\n    var dir = radian < minAngle ? 1 : -1;\n\n    while (radian < minAngle || radian > maxAngle) {\n      radian += dir * 360;\n    }\n\n    return [radius, radian];\n  };\n  /**\r\n   * Convert a (radius, angle) coord to (x, y) point\r\n   */\n\n\n  Polar.prototype.coordToPoint = function (coord) {\n    var radius = coord[0];\n    var radian = coord[1] / 180 * Math.PI;\n    var x = Math.cos(radian) * radius + this.cx; // Inverse the y\n\n    var y = -Math.sin(radian) * radius + this.cy;\n    return [x, y];\n  };\n  /**\r\n   * Get ring area of cartesian.\r\n   * Area will have a contain function to determine if a point is in the coordinate system.\r\n   */\n\n\n  Polar.prototype.getArea = function () {\n    var angleAxis = this.getAngleAxis();\n    var radiusAxis = this.getRadiusAxis();\n    var radiusExtent = radiusAxis.getExtent().slice();\n    radiusExtent[0] > radiusExtent[1] && radiusExtent.reverse();\n    var angleExtent = angleAxis.getExtent();\n    var RADIAN = Math.PI / 180;\n    return {\n      cx: this.cx,\n      cy: this.cy,\n      r0: radiusExtent[0],\n      r: radiusExtent[1],\n      startAngle: -angleExtent[0] * RADIAN,\n      endAngle: -angleExtent[1] * RADIAN,\n      clockwise: angleAxis.inverse,\n      contain: function contain(x, y) {\n        // It's a ring shape.\n        // Start angle and end angle don't matter\n        var dx = x - this.cx;\n        var dy = y - this.cy; // minus a tiny value 1e-4 to avoid being clipped unexpectedly\n\n        var d2 = dx * dx + dy * dy - 1e-4;\n        var r = this.r;\n        var r0 = this.r0;\n        return d2 <= r * r && d2 >= r0 * r0;\n      }\n    };\n  };\n\n  Polar.prototype.convertToPixel = function (ecModel, finder, value) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? this.dataToPoint(value) : null;\n  };\n\n  Polar.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? this.pointToData(pixel) : null;\n  };\n\n  return Polar;\n}();\n\nfunction getCoordSys(finder) {\n  var seriesModel = finder.seriesModel;\n  var polarModel = finder.polarModel;\n  return polarModel && polarModel.coordinateSystem || seriesModel && seriesModel.coordinateSystem;\n}\n\nexport default Polar;","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/qingge-Market/qingge-vue/node_modules/echarts/lib/coord/polar/Polar.js"],"names":["RadiusAxis","AngleAxis","polarDimensions","Polar","name","dimensions","type","cx","cy","_radiusAxis","_angleAxis","axisPointerEnabled","polar","prototype","containPoint","point","coord","pointToCoord","contain","containData","data","getAxis","dim","key","getAxes","getAxesByScale","scaleType","axes","angleAxis","radiusAxis","scale","push","getAngleAxis","getRadiusAxis","getOtherAxis","axis","getBaseAxis","getTooltipAxes","baseAxis","baseAxes","otherAxes","dataToPoint","clamp","coordToPoint","dataToRadius","dataToAngle","pointToData","radiusToData","angleToData","dx","dy","extent","getExtent","minAngle","Math","min","maxAngle","max","inverse","radius","sqrt","radian","atan2","PI","dir","x","cos","y","sin","getArea","radiusExtent","slice","reverse","angleExtent","RADIAN","r0","r","startAngle","endAngle","clockwise","d2","convertToPixel","ecModel","finder","value","coordSys","getCoordSys","convertFromPixel","pixel","seriesModel","polarModel","coordinateSystem"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport RadiusAxis from './RadiusAxis.js';\r\nimport AngleAxis from './AngleAxis.js';\r\nexport var polarDimensions = ['radius', 'angle'];\r\n\r\nvar Polar =\r\n/** @class */\r\nfunction () {\r\n  function Polar(name) {\r\n    this.dimensions = polarDimensions;\r\n    this.type = 'polar';\r\n    /**\r\n     * x of polar center\r\n     */\r\n\r\n    this.cx = 0;\r\n    /**\r\n     * y of polar center\r\n     */\r\n\r\n    this.cy = 0;\r\n    this._radiusAxis = new RadiusAxis();\r\n    this._angleAxis = new AngleAxis();\r\n    this.axisPointerEnabled = true;\r\n    this.name = name || '';\r\n    this._radiusAxis.polar = this._angleAxis.polar = this;\r\n  }\r\n  /**\r\n   * If contain coord\r\n   */\r\n\r\n\r\n  Polar.prototype.containPoint = function (point) {\r\n    var coord = this.pointToCoord(point);\r\n    return this._radiusAxis.contain(coord[0]) && this._angleAxis.contain(coord[1]);\r\n  };\r\n  /**\r\n   * If contain data\r\n   */\r\n\r\n\r\n  Polar.prototype.containData = function (data) {\r\n    return this._radiusAxis.containData(data[0]) && this._angleAxis.containData(data[1]);\r\n  };\r\n\r\n  Polar.prototype.getAxis = function (dim) {\r\n    var key = '_' + dim + 'Axis';\r\n    return this[key];\r\n  };\r\n\r\n  Polar.prototype.getAxes = function () {\r\n    return [this._radiusAxis, this._angleAxis];\r\n  };\r\n  /**\r\n   * Get axes by type of scale\r\n   */\r\n\r\n\r\n  Polar.prototype.getAxesByScale = function (scaleType) {\r\n    var axes = [];\r\n    var angleAxis = this._angleAxis;\r\n    var radiusAxis = this._radiusAxis;\r\n    angleAxis.scale.type === scaleType && axes.push(angleAxis);\r\n    radiusAxis.scale.type === scaleType && axes.push(radiusAxis);\r\n    return axes;\r\n  };\r\n\r\n  Polar.prototype.getAngleAxis = function () {\r\n    return this._angleAxis;\r\n  };\r\n\r\n  Polar.prototype.getRadiusAxis = function () {\r\n    return this._radiusAxis;\r\n  };\r\n\r\n  Polar.prototype.getOtherAxis = function (axis) {\r\n    var angleAxis = this._angleAxis;\r\n    return axis === angleAxis ? this._radiusAxis : angleAxis;\r\n  };\r\n  /**\r\n   * Base axis will be used on stacking.\r\n   *\r\n   */\r\n\r\n\r\n  Polar.prototype.getBaseAxis = function () {\r\n    return this.getAxesByScale('ordinal')[0] || this.getAxesByScale('time')[0] || this.getAngleAxis();\r\n  };\r\n\r\n  Polar.prototype.getTooltipAxes = function (dim) {\r\n    var baseAxis = dim != null && dim !== 'auto' ? this.getAxis(dim) : this.getBaseAxis();\r\n    return {\r\n      baseAxes: [baseAxis],\r\n      otherAxes: [this.getOtherAxis(baseAxis)]\r\n    };\r\n  };\r\n  /**\r\n   * Convert a single data item to (x, y) point.\r\n   * Parameter data is an array which the first element is radius and the second is angle\r\n   */\r\n\r\n\r\n  Polar.prototype.dataToPoint = function (data, clamp) {\r\n    return this.coordToPoint([this._radiusAxis.dataToRadius(data[0], clamp), this._angleAxis.dataToAngle(data[1], clamp)]);\r\n  };\r\n  /**\r\n   * Convert a (x, y) point to data\r\n   */\r\n\r\n\r\n  Polar.prototype.pointToData = function (point, clamp) {\r\n    var coord = this.pointToCoord(point);\r\n    return [this._radiusAxis.radiusToData(coord[0], clamp), this._angleAxis.angleToData(coord[1], clamp)];\r\n  };\r\n  /**\r\n   * Convert a (x, y) point to (radius, angle) coord\r\n   */\r\n\r\n\r\n  Polar.prototype.pointToCoord = function (point) {\r\n    var dx = point[0] - this.cx;\r\n    var dy = point[1] - this.cy;\r\n    var angleAxis = this.getAngleAxis();\r\n    var extent = angleAxis.getExtent();\r\n    var minAngle = Math.min(extent[0], extent[1]);\r\n    var maxAngle = Math.max(extent[0], extent[1]); // Fix fixed extent in polarCreator\r\n    // FIXME\r\n\r\n    angleAxis.inverse ? minAngle = maxAngle - 360 : maxAngle = minAngle + 360;\r\n    var radius = Math.sqrt(dx * dx + dy * dy);\r\n    dx /= radius;\r\n    dy /= radius;\r\n    var radian = Math.atan2(-dy, dx) / Math.PI * 180; // move to angleExtent\r\n\r\n    var dir = radian < minAngle ? 1 : -1;\r\n\r\n    while (radian < minAngle || radian > maxAngle) {\r\n      radian += dir * 360;\r\n    }\r\n\r\n    return [radius, radian];\r\n  };\r\n  /**\r\n   * Convert a (radius, angle) coord to (x, y) point\r\n   */\r\n\r\n\r\n  Polar.prototype.coordToPoint = function (coord) {\r\n    var radius = coord[0];\r\n    var radian = coord[1] / 180 * Math.PI;\r\n    var x = Math.cos(radian) * radius + this.cx; // Inverse the y\r\n\r\n    var y = -Math.sin(radian) * radius + this.cy;\r\n    return [x, y];\r\n  };\r\n  /**\r\n   * Get ring area of cartesian.\r\n   * Area will have a contain function to determine if a point is in the coordinate system.\r\n   */\r\n\r\n\r\n  Polar.prototype.getArea = function () {\r\n    var angleAxis = this.getAngleAxis();\r\n    var radiusAxis = this.getRadiusAxis();\r\n    var radiusExtent = radiusAxis.getExtent().slice();\r\n    radiusExtent[0] > radiusExtent[1] && radiusExtent.reverse();\r\n    var angleExtent = angleAxis.getExtent();\r\n    var RADIAN = Math.PI / 180;\r\n    return {\r\n      cx: this.cx,\r\n      cy: this.cy,\r\n      r0: radiusExtent[0],\r\n      r: radiusExtent[1],\r\n      startAngle: -angleExtent[0] * RADIAN,\r\n      endAngle: -angleExtent[1] * RADIAN,\r\n      clockwise: angleAxis.inverse,\r\n      contain: function (x, y) {\r\n        // It's a ring shape.\r\n        // Start angle and end angle don't matter\r\n        var dx = x - this.cx;\r\n        var dy = y - this.cy; // minus a tiny value 1e-4 to avoid being clipped unexpectedly\r\n\r\n        var d2 = dx * dx + dy * dy - 1e-4;\r\n        var r = this.r;\r\n        var r0 = this.r0;\r\n        return d2 <= r * r && d2 >= r0 * r0;\r\n      }\r\n    };\r\n  };\r\n\r\n  Polar.prototype.convertToPixel = function (ecModel, finder, value) {\r\n    var coordSys = getCoordSys(finder);\r\n    return coordSys === this ? this.dataToPoint(value) : null;\r\n  };\r\n\r\n  Polar.prototype.convertFromPixel = function (ecModel, finder, pixel) {\r\n    var coordSys = getCoordSys(finder);\r\n    return coordSys === this ? this.pointToData(pixel) : null;\r\n  };\r\n\r\n  return Polar;\r\n}();\r\n\r\nfunction getCoordSys(finder) {\r\n  var seriesModel = finder.seriesModel;\r\n  var polarModel = finder.polarModel;\r\n  return polarModel && polarModel.coordinateSystem || seriesModel && seriesModel.coordinateSystem;\r\n}\r\n\r\nexport default Polar;"]},"metadata":{},"sourceType":"module"}