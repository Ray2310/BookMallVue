{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { isFunction, isString } from 'zrender/lib/core/util.js';\nvar samplers = {\n  average: function average(frame) {\n    var sum = 0;\n    var count = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      if (!isNaN(frame[i])) {\n        sum += frame[i];\n        count++;\n      }\n    } // Return NaN if count is 0\n\n\n    return count === 0 ? NaN : sum / count;\n  },\n  sum: function sum(frame) {\n    var sum = 0;\n\n    for (var i = 0; i < frame.length; i++) {\n      // Ignore NaN\n      sum += frame[i] || 0;\n    }\n\n    return sum;\n  },\n  max: function max(frame) {\n    var max = -Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] > max && (max = frame[i]);\n    } // NaN will cause illegal axis extent.\n\n\n    return isFinite(max) ? max : NaN;\n  },\n  min: function min(frame) {\n    var min = Infinity;\n\n    for (var i = 0; i < frame.length; i++) {\n      frame[i] < min && (min = frame[i]);\n    } // NaN will cause illegal axis extent.\n\n\n    return isFinite(min) ? min : NaN;\n  },\n  // TODO\n  // Median\n  nearest: function nearest(frame) {\n    return frame[0];\n  }\n};\n\nvar indexSampler = function indexSampler(frame) {\n  return Math.round(frame.length / 2);\n};\n\nexport default function dataSample(seriesType) {\n  return {\n    seriesType: seriesType,\n    // FIXME:TS never used, so comment it\n    // modifyOutputEnd: true,\n    reset: function reset(seriesModel, ecModel, api) {\n      var data = seriesModel.getData();\n      var sampling = seriesModel.get('sampling');\n      var coordSys = seriesModel.coordinateSystem;\n      var count = data.count(); // Only cartesian2d support down sampling. Disable it when there is few data.\n\n      if (count > 10 && coordSys.type === 'cartesian2d' && sampling) {\n        var baseAxis = coordSys.getBaseAxis();\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\n        var extent = baseAxis.getExtent();\n        var dpr = api.getDevicePixelRatio(); // Coordinste system has been resized\n\n        var size = Math.abs(extent[1] - extent[0]) * (dpr || 1);\n        var rate = Math.round(count / size);\n\n        if (isFinite(rate) && rate > 1) {\n          if (sampling === 'lttb') {\n            seriesModel.setData(data.lttbDownSample(data.mapDimension(valueAxis.dim), 1 / rate));\n          }\n\n          var sampler = void 0;\n\n          if (isString(sampling)) {\n            sampler = samplers[sampling];\n          } else if (isFunction(sampling)) {\n            sampler = sampling;\n          }\n\n          if (sampler) {\n            // Only support sample the first dim mapped from value axis.\n            seriesModel.setData(data.downSample(data.mapDimension(valueAxis.dim), 1 / rate, sampler, indexSampler));\n          }\n        }\n      }\n    }\n  };\n}","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/qingge-Market/qingge-vue/node_modules/echarts/lib/processor/dataSample.js"],"names":["isFunction","isString","samplers","average","frame","sum","count","i","length","isNaN","NaN","max","Infinity","isFinite","min","nearest","indexSampler","Math","round","dataSample","seriesType","reset","seriesModel","ecModel","api","data","getData","sampling","get","coordSys","coordinateSystem","type","baseAxis","getBaseAxis","valueAxis","getOtherAxis","extent","getExtent","dpr","getDevicePixelRatio","size","abs","rate","setData","lttbDownSample","mapDimension","dim","sampler","downSample"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { isFunction, isString } from 'zrender/lib/core/util.js';\r\nvar samplers = {\r\n  average: function (frame) {\r\n    var sum = 0;\r\n    var count = 0;\r\n\r\n    for (var i = 0; i < frame.length; i++) {\r\n      if (!isNaN(frame[i])) {\r\n        sum += frame[i];\r\n        count++;\r\n      }\r\n    } // Return NaN if count is 0\r\n\r\n\r\n    return count === 0 ? NaN : sum / count;\r\n  },\r\n  sum: function (frame) {\r\n    var sum = 0;\r\n\r\n    for (var i = 0; i < frame.length; i++) {\r\n      // Ignore NaN\r\n      sum += frame[i] || 0;\r\n    }\r\n\r\n    return sum;\r\n  },\r\n  max: function (frame) {\r\n    var max = -Infinity;\r\n\r\n    for (var i = 0; i < frame.length; i++) {\r\n      frame[i] > max && (max = frame[i]);\r\n    } // NaN will cause illegal axis extent.\r\n\r\n\r\n    return isFinite(max) ? max : NaN;\r\n  },\r\n  min: function (frame) {\r\n    var min = Infinity;\r\n\r\n    for (var i = 0; i < frame.length; i++) {\r\n      frame[i] < min && (min = frame[i]);\r\n    } // NaN will cause illegal axis extent.\r\n\r\n\r\n    return isFinite(min) ? min : NaN;\r\n  },\r\n  // TODO\r\n  // Median\r\n  nearest: function (frame) {\r\n    return frame[0];\r\n  }\r\n};\r\n\r\nvar indexSampler = function (frame) {\r\n  return Math.round(frame.length / 2);\r\n};\r\n\r\nexport default function dataSample(seriesType) {\r\n  return {\r\n    seriesType: seriesType,\r\n    // FIXME:TS never used, so comment it\r\n    // modifyOutputEnd: true,\r\n    reset: function (seriesModel, ecModel, api) {\r\n      var data = seriesModel.getData();\r\n      var sampling = seriesModel.get('sampling');\r\n      var coordSys = seriesModel.coordinateSystem;\r\n      var count = data.count(); // Only cartesian2d support down sampling. Disable it when there is few data.\r\n\r\n      if (count > 10 && coordSys.type === 'cartesian2d' && sampling) {\r\n        var baseAxis = coordSys.getBaseAxis();\r\n        var valueAxis = coordSys.getOtherAxis(baseAxis);\r\n        var extent = baseAxis.getExtent();\r\n        var dpr = api.getDevicePixelRatio(); // Coordinste system has been resized\r\n\r\n        var size = Math.abs(extent[1] - extent[0]) * (dpr || 1);\r\n        var rate = Math.round(count / size);\r\n\r\n        if (isFinite(rate) && rate > 1) {\r\n          if (sampling === 'lttb') {\r\n            seriesModel.setData(data.lttbDownSample(data.mapDimension(valueAxis.dim), 1 / rate));\r\n          }\r\n\r\n          var sampler = void 0;\r\n\r\n          if (isString(sampling)) {\r\n            sampler = samplers[sampling];\r\n          } else if (isFunction(sampling)) {\r\n            sampler = sampling;\r\n          }\r\n\r\n          if (sampler) {\r\n            // Only support sample the first dim mapped from value axis.\r\n            seriesModel.setData(data.downSample(data.mapDimension(valueAxis.dim), 1 / rate, sampler, indexSampler));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n}"]},"metadata":{},"sourceType":"module"}