{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.slice.js\";\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { retrieveRawValue } from '../../data/helper/dataProvider.js';\nimport { formatTpl } from '../../util/format.js';\nimport { error, makePrintable } from '../../util/log.js';\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g;\n\nvar DataFormatMixin =\n/** @class */\nfunction () {\n  function DataFormatMixin() {}\n  /**\n   * Get params for formatter\n   */\n\n\n  DataFormatMixin.prototype.getDataParams = function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var style = data.getItemVisual(dataIndex, 'style');\n    var color = style && style[data.getItemVisual(dataIndex, 'drawType') || 'fill'];\n    var borderColor = style && style.stroke;\n    var mainType = this.mainType;\n    var isSeries = mainType === 'series';\n    var userOutput = data.userOutput && data.userOutput.get();\n    return {\n      componentType: mainType,\n      componentSubType: this.subType,\n      componentIndex: this.componentIndex,\n      seriesType: isSeries ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: isSeries ? this.id : null,\n      seriesName: isSeries ? this.name : null,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      borderColor: borderColor,\n      dimensionNames: userOutput ? userOutput.fullDimensions : null,\n      encode: userOutput ? userOutput.encode : null,\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  };\n  /**\n   * Format label\n   * @param dataIndex\n   * @param status 'normal' by default\n   * @param dataType\n   * @param labelDimIndex Only used in some chart that\n   *        use formatter in different dimensions, like radar.\n   * @param formatter Formatter given outside.\n   * @return return null/undefined if no formatter\n   */\n\n\n  DataFormatMixin.prototype.getFormattedLabel = function (dataIndex, status, dataType, labelDimIndex, formatter, extendParams) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (extendParams) {\n      params.value = extendParams.interpolatedValue;\n    }\n\n    if (labelDimIndex != null && zrUtil.isArray(params.value)) {\n      params.value = params.value[labelDimIndex];\n    }\n\n    if (!formatter) {\n      var itemModel = data.getItemModel(dataIndex); // @ts-ignore\n\n      formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : [status, 'label', 'formatter']);\n    }\n\n    if (zrUtil.isFunction(formatter)) {\n      params.status = status;\n      params.dimensionIndex = labelDimIndex;\n      return formatter(params);\n    } else if (zrUtil.isString(formatter)) {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dimStr) {\n        var len = dimStr.length;\n        var dimLoose = dimStr;\n\n        if (dimLoose.charAt(0) === '[' && dimLoose.charAt(len - 1) === ']') {\n          dimLoose = +dimLoose.slice(1, len - 1); // Also support: '[]' => 0\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (isNaN(dimLoose)) {\n              error(\"Invalide label formatter: @\" + dimStr + \", only support @[0], @[1], @[2], ...\");\n            }\n          }\n        }\n\n        var val = retrieveRawValue(data, dataIndex, dimLoose);\n\n        if (extendParams && zrUtil.isArray(extendParams.interpolatedValue)) {\n          var dimIndex = data.getDimensionIndex(dimLoose);\n\n          if (dimIndex >= 0) {\n            val = extendParams.interpolatedValue[dimIndex];\n          }\n        }\n\n        return val != null ? val + '' : '';\n      });\n    }\n  };\n  /**\n   * Get raw value in option\n   */\n\n\n  DataFormatMixin.prototype.getRawValue = function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  };\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {string} [dataType]\n   */\n\n\n  DataFormatMixin.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    // Empty function\n    return;\n  };\n\n  return DataFormatMixin;\n}();\n\nexport { DataFormatMixin };\n; // PENDING: previously we accept this type when calling `formatTooltip`,\n// but guess little chance has been used outside. Do we need to backward\n// compat it?\n// type TooltipFormatResultLegacyObject = {\n//     // `html` means the markup language text, either in 'html' or 'richText'.\n//     // The name `html` is not appropriate because in 'richText' it is not a HTML\n//     // string. But still support it for backward compatibility.\n//     html: string;\n//     markers: Dictionary<ColorString>;\n// };\n\n/**\n * For backward compat, normalize the return from `formatTooltip`.\n */\n\nexport function normalizeTooltipFormatResult(result) {\n  var markupText; // let markers: Dictionary<ColorString>;\n\n  var markupFragment;\n\n  if (zrUtil.isObject(result)) {\n    if (result.type) {\n      markupFragment = result;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('The return type of `formatTooltip` is not supported: ' + makePrintable(result));\n      }\n    } // else {\n    //     markupText = (result as TooltipFormatResultLegacyObject).html;\n    //     markers = (result as TooltipFormatResultLegacyObject).markers;\n    //     if (markersExisting) {\n    //         markers = zrUtil.merge(markersExisting, markers);\n    //     }\n    // }\n\n  } else {\n    markupText = result;\n  }\n\n  return {\n    text: markupText,\n    // markers: markers || markersExisting,\n    frag: markupFragment\n  };\n}","map":{"version":3,"sources":["/home/rayce/Udatabase/study/ElectronicMall/ElectronicMallVue/node_modules/echarts/lib/model/mixin/dataFormat.js"],"names":["zrUtil","retrieveRawValue","formatTpl","error","makePrintable","DIMENSION_LABEL_REG","DataFormatMixin","prototype","getDataParams","dataIndex","dataType","data","getData","rawValue","getRawValue","rawDataIndex","getRawIndex","name","getName","itemOpt","getRawDataItem","style","getItemVisual","color","borderColor","stroke","mainType","isSeries","userOutput","get","componentType","componentSubType","subType","componentIndex","seriesType","seriesIndex","seriesId","id","seriesName","value","dimensionNames","fullDimensions","encode","$vars","getFormattedLabel","status","labelDimIndex","formatter","extendParams","params","interpolatedValue","isArray","itemModel","getItemModel","isFunction","dimensionIndex","isString","str","replace","origin","dimStr","len","length","dimLoose","charAt","slice","process","env","NODE_ENV","isNaN","val","dimIndex","getDimensionIndex","idx","formatTooltip","multipleSeries","normalizeTooltipFormatResult","result","markupText","markupFragment","isObject","type","console","warn","text","frag"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { retrieveRawValue } from '../../data/helper/dataProvider.js';\nimport { formatTpl } from '../../util/format.js';\nimport { error, makePrintable } from '../../util/log.js';\nvar DIMENSION_LABEL_REG = /\\{@(.+?)\\}/g;\n\nvar DataFormatMixin =\n/** @class */\nfunction () {\n  function DataFormatMixin() {}\n  /**\n   * Get params for formatter\n   */\n\n\n  DataFormatMixin.prototype.getDataParams = function (dataIndex, dataType) {\n    var data = this.getData(dataType);\n    var rawValue = this.getRawValue(dataIndex, dataType);\n    var rawDataIndex = data.getRawIndex(dataIndex);\n    var name = data.getName(dataIndex);\n    var itemOpt = data.getRawDataItem(dataIndex);\n    var style = data.getItemVisual(dataIndex, 'style');\n    var color = style && style[data.getItemVisual(dataIndex, 'drawType') || 'fill'];\n    var borderColor = style && style.stroke;\n    var mainType = this.mainType;\n    var isSeries = mainType === 'series';\n    var userOutput = data.userOutput && data.userOutput.get();\n    return {\n      componentType: mainType,\n      componentSubType: this.subType,\n      componentIndex: this.componentIndex,\n      seriesType: isSeries ? this.subType : null,\n      seriesIndex: this.seriesIndex,\n      seriesId: isSeries ? this.id : null,\n      seriesName: isSeries ? this.name : null,\n      name: name,\n      dataIndex: rawDataIndex,\n      data: itemOpt,\n      dataType: dataType,\n      value: rawValue,\n      color: color,\n      borderColor: borderColor,\n      dimensionNames: userOutput ? userOutput.fullDimensions : null,\n      encode: userOutput ? userOutput.encode : null,\n      // Param name list for mapping `a`, `b`, `c`, `d`, `e`\n      $vars: ['seriesName', 'name', 'value']\n    };\n  };\n  /**\n   * Format label\n   * @param dataIndex\n   * @param status 'normal' by default\n   * @param dataType\n   * @param labelDimIndex Only used in some chart that\n   *        use formatter in different dimensions, like radar.\n   * @param formatter Formatter given outside.\n   * @return return null/undefined if no formatter\n   */\n\n\n  DataFormatMixin.prototype.getFormattedLabel = function (dataIndex, status, dataType, labelDimIndex, formatter, extendParams) {\n    status = status || 'normal';\n    var data = this.getData(dataType);\n    var params = this.getDataParams(dataIndex, dataType);\n\n    if (extendParams) {\n      params.value = extendParams.interpolatedValue;\n    }\n\n    if (labelDimIndex != null && zrUtil.isArray(params.value)) {\n      params.value = params.value[labelDimIndex];\n    }\n\n    if (!formatter) {\n      var itemModel = data.getItemModel(dataIndex); // @ts-ignore\n\n      formatter = itemModel.get(status === 'normal' ? ['label', 'formatter'] : [status, 'label', 'formatter']);\n    }\n\n    if (zrUtil.isFunction(formatter)) {\n      params.status = status;\n      params.dimensionIndex = labelDimIndex;\n      return formatter(params);\n    } else if (zrUtil.isString(formatter)) {\n      var str = formatTpl(formatter, params); // Support 'aaa{@[3]}bbb{@product}ccc'.\n      // Do not support '}' in dim name util have to.\n\n      return str.replace(DIMENSION_LABEL_REG, function (origin, dimStr) {\n        var len = dimStr.length;\n        var dimLoose = dimStr;\n\n        if (dimLoose.charAt(0) === '[' && dimLoose.charAt(len - 1) === ']') {\n          dimLoose = +dimLoose.slice(1, len - 1); // Also support: '[]' => 0\n\n          if (process.env.NODE_ENV !== 'production') {\n            if (isNaN(dimLoose)) {\n              error(\"Invalide label formatter: @\" + dimStr + \", only support @[0], @[1], @[2], ...\");\n            }\n          }\n        }\n\n        var val = retrieveRawValue(data, dataIndex, dimLoose);\n\n        if (extendParams && zrUtil.isArray(extendParams.interpolatedValue)) {\n          var dimIndex = data.getDimensionIndex(dimLoose);\n\n          if (dimIndex >= 0) {\n            val = extendParams.interpolatedValue[dimIndex];\n          }\n        }\n\n        return val != null ? val + '' : '';\n      });\n    }\n  };\n  /**\n   * Get raw value in option\n   */\n\n\n  DataFormatMixin.prototype.getRawValue = function (idx, dataType) {\n    return retrieveRawValue(this.getData(dataType), idx);\n  };\n  /**\n   * Should be implemented.\n   * @param {number} dataIndex\n   * @param {boolean} [multipleSeries=false]\n   * @param {string} [dataType]\n   */\n\n\n  DataFormatMixin.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    // Empty function\n    return;\n  };\n\n  return DataFormatMixin;\n}();\n\nexport { DataFormatMixin };\n; // PENDING: previously we accept this type when calling `formatTooltip`,\n// but guess little chance has been used outside. Do we need to backward\n// compat it?\n// type TooltipFormatResultLegacyObject = {\n//     // `html` means the markup language text, either in 'html' or 'richText'.\n//     // The name `html` is not appropriate because in 'richText' it is not a HTML\n//     // string. But still support it for backward compatibility.\n//     html: string;\n//     markers: Dictionary<ColorString>;\n// };\n\n/**\n * For backward compat, normalize the return from `formatTooltip`.\n */\n\nexport function normalizeTooltipFormatResult(result) {\n  var markupText; // let markers: Dictionary<ColorString>;\n\n  var markupFragment;\n\n  if (zrUtil.isObject(result)) {\n    if (result.type) {\n      markupFragment = result;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn('The return type of `formatTooltip` is not supported: ' + makePrintable(result));\n      }\n    } // else {\n    //     markupText = (result as TooltipFormatResultLegacyObject).html;\n    //     markers = (result as TooltipFormatResultLegacyObject).markers;\n    //     if (markersExisting) {\n    //         markers = zrUtil.merge(markersExisting, markers);\n    //     }\n    // }\n\n  } else {\n    markupText = result;\n  }\n\n  return {\n    text: markupText,\n    // markers: markers || markersExisting,\n    frag: markupFragment\n  };\n}"]},"metadata":{},"sourceType":"module"}