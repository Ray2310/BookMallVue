{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.concat.js\";\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport AxisBuilder from '../axis/AxisBuilder.js';\nimport * as graphic from '../../util/graphic.js';\nimport ComponentView from '../../view/Component.js';\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\n\nvar RadarView =\n/** @class */\nfunction (_super) {\n  __extends(RadarView, _super);\n\n  function RadarView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = RadarView.type;\n    return _this;\n  }\n\n  RadarView.prototype.render = function (radarModel, ecModel, api) {\n    var group = this.group;\n    group.removeAll();\n\n    this._buildAxes(radarModel);\n\n    this._buildSplitLineAndArea(radarModel);\n  };\n\n  RadarView.prototype._buildAxes = function (radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n    var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {\n      var axisName = indicatorAxis.model.get('showName') ? indicatorAxis.name : ''; // hide name\n\n      var axisBuilder = new AxisBuilder(indicatorAxis.model, {\n        axisName: axisName,\n        position: [radar.cx, radar.cy],\n        rotation: indicatorAxis.angle,\n        labelDirection: -1,\n        tickDirection: -1,\n        nameDirection: 1\n      });\n      return axisBuilder;\n    });\n    zrUtil.each(axisBuilders, function (axisBuilder) {\n      zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n      this.group.add(axisBuilder.getGroup());\n    }, this);\n  };\n\n  RadarView.prototype._buildSplitLineAndArea = function (radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n\n    if (!indicatorAxes.length) {\n      return;\n    }\n\n    var shape = radarModel.get('shape');\n    var splitLineModel = radarModel.getModel('splitLine');\n    var splitAreaModel = radarModel.getModel('splitArea');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var showSplitLine = splitLineModel.get('show');\n    var showSplitArea = splitAreaModel.get('show');\n    var splitLineColors = lineStyleModel.get('color');\n    var splitAreaColors = areaStyleModel.get('color');\n    var splitLineColorsArr = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];\n    var splitAreaColorsArr = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];\n    var splitLines = [];\n    var splitAreas = [];\n\n    function getColorIndex(areaOrLine, areaOrLineColorList, idx) {\n      var colorIndex = idx % areaOrLineColorList.length;\n      areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];\n      return colorIndex;\n    }\n\n    if (shape === 'circle') {\n      var ticksRadius = indicatorAxes[0].getTicksCoords();\n      var cx = radar.cx;\n      var cy = radar.cy;\n\n      for (var i = 0; i < ticksRadius.length; i++) {\n        if (showSplitLine) {\n          var colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);\n          splitLines[colorIndex].push(new graphic.Circle({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r: ticksRadius[i].coord\n            }\n          }));\n        }\n\n        if (showSplitArea && i < ticksRadius.length - 1) {\n          var colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i);\n          splitAreas[colorIndex].push(new graphic.Ring({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r0: ticksRadius[i].coord,\n              r: ticksRadius[i + 1].coord\n            }\n          }));\n        }\n      }\n    } // Polyyon\n    else {\n      var realSplitNumber_1;\n      var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {\n        var ticksCoords = indicatorAxis.getTicksCoords();\n        realSplitNumber_1 = realSplitNumber_1 == null ? ticksCoords.length - 1 : Math.min(ticksCoords.length - 1, realSplitNumber_1);\n        return zrUtil.map(ticksCoords, function (tickCoord) {\n          return radar.coordToPoint(tickCoord.coord, idx);\n        });\n      });\n      var prevPoints = [];\n\n      for (var i = 0; i <= realSplitNumber_1; i++) {\n        var points = [];\n\n        for (var j = 0; j < indicatorAxes.length; j++) {\n          points.push(axesTicksPoints[j][i]);\n        } // Close\n\n\n        if (points[0]) {\n          points.push(points[0].slice());\n        } else {\n          if (process.env.NODE_ENV !== 'production') {\n            console.error('Can\\'t draw value axis ' + i);\n          }\n        }\n\n        if (showSplitLine) {\n          var colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);\n          splitLines[colorIndex].push(new graphic.Polyline({\n            shape: {\n              points: points\n            }\n          }));\n        }\n\n        if (showSplitArea && prevPoints) {\n          var colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i - 1);\n          splitAreas[colorIndex].push(new graphic.Polygon({\n            shape: {\n              points: points.concat(prevPoints)\n            }\n          }));\n        }\n\n        prevPoints = points.slice().reverse();\n      }\n    }\n\n    var lineStyle = lineStyleModel.getLineStyle();\n    var areaStyle = areaStyleModel.getAreaStyle(); // Add splitArea before splitLine\n\n    zrUtil.each(splitAreas, function (splitAreas, idx) {\n      this.group.add(graphic.mergePath(splitAreas, {\n        style: zrUtil.defaults({\n          stroke: 'none',\n          fill: splitAreaColorsArr[idx % splitAreaColorsArr.length]\n        }, areaStyle),\n        silent: true\n      }));\n    }, this);\n    zrUtil.each(splitLines, function (splitLines, idx) {\n      this.group.add(graphic.mergePath(splitLines, {\n        style: zrUtil.defaults({\n          fill: 'none',\n          stroke: splitLineColorsArr[idx % splitLineColorsArr.length]\n        }, lineStyle),\n        silent: true\n      }));\n    }, this);\n  };\n\n  RadarView.type = 'radar';\n  return RadarView;\n}(ComponentView);\n\nexport default RadarView;","map":{"version":3,"sources":["/home/rayce/Udatabase/study/ElectronicMall/BookVue/node_modules/echarts/lib/component/radar/RadarView.js"],"names":["__extends","zrUtil","AxisBuilder","graphic","ComponentView","axisBuilderAttrs","RadarView","_super","_this","apply","arguments","type","prototype","render","radarModel","ecModel","api","group","removeAll","_buildAxes","_buildSplitLineAndArea","radar","coordinateSystem","indicatorAxes","getIndicatorAxes","axisBuilders","map","indicatorAxis","axisName","model","get","name","axisBuilder","position","cx","cy","rotation","angle","labelDirection","tickDirection","nameDirection","each","add","getGroup","length","shape","splitLineModel","getModel","splitAreaModel","lineStyleModel","areaStyleModel","showSplitLine","showSplitArea","splitLineColors","splitAreaColors","splitLineColorsArr","isArray","splitAreaColorsArr","splitLines","splitAreas","getColorIndex","areaOrLine","areaOrLineColorList","idx","colorIndex","ticksRadius","getTicksCoords","i","push","Circle","r","coord","Ring","r0","realSplitNumber_1","axesTicksPoints","ticksCoords","Math","min","tickCoord","coordToPoint","prevPoints","points","j","slice","process","env","NODE_ENV","console","error","Polyline","Polygon","concat","reverse","lineStyle","getLineStyle","areaStyle","getAreaStyle","mergePath","style","defaults","stroke","fill","silent"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport AxisBuilder from '../axis/AxisBuilder.js';\nimport * as graphic from '../../util/graphic.js';\nimport ComponentView from '../../view/Component.js';\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\n\nvar RadarView =\n/** @class */\nfunction (_super) {\n  __extends(RadarView, _super);\n\n  function RadarView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = RadarView.type;\n    return _this;\n  }\n\n  RadarView.prototype.render = function (radarModel, ecModel, api) {\n    var group = this.group;\n    group.removeAll();\n\n    this._buildAxes(radarModel);\n\n    this._buildSplitLineAndArea(radarModel);\n  };\n\n  RadarView.prototype._buildAxes = function (radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n    var axisBuilders = zrUtil.map(indicatorAxes, function (indicatorAxis) {\n      var axisName = indicatorAxis.model.get('showName') ? indicatorAxis.name : ''; // hide name\n\n      var axisBuilder = new AxisBuilder(indicatorAxis.model, {\n        axisName: axisName,\n        position: [radar.cx, radar.cy],\n        rotation: indicatorAxis.angle,\n        labelDirection: -1,\n        tickDirection: -1,\n        nameDirection: 1\n      });\n      return axisBuilder;\n    });\n    zrUtil.each(axisBuilders, function (axisBuilder) {\n      zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n      this.group.add(axisBuilder.getGroup());\n    }, this);\n  };\n\n  RadarView.prototype._buildSplitLineAndArea = function (radarModel) {\n    var radar = radarModel.coordinateSystem;\n    var indicatorAxes = radar.getIndicatorAxes();\n\n    if (!indicatorAxes.length) {\n      return;\n    }\n\n    var shape = radarModel.get('shape');\n    var splitLineModel = radarModel.getModel('splitLine');\n    var splitAreaModel = radarModel.getModel('splitArea');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var showSplitLine = splitLineModel.get('show');\n    var showSplitArea = splitAreaModel.get('show');\n    var splitLineColors = lineStyleModel.get('color');\n    var splitAreaColors = areaStyleModel.get('color');\n    var splitLineColorsArr = zrUtil.isArray(splitLineColors) ? splitLineColors : [splitLineColors];\n    var splitAreaColorsArr = zrUtil.isArray(splitAreaColors) ? splitAreaColors : [splitAreaColors];\n    var splitLines = [];\n    var splitAreas = [];\n\n    function getColorIndex(areaOrLine, areaOrLineColorList, idx) {\n      var colorIndex = idx % areaOrLineColorList.length;\n      areaOrLine[colorIndex] = areaOrLine[colorIndex] || [];\n      return colorIndex;\n    }\n\n    if (shape === 'circle') {\n      var ticksRadius = indicatorAxes[0].getTicksCoords();\n      var cx = radar.cx;\n      var cy = radar.cy;\n\n      for (var i = 0; i < ticksRadius.length; i++) {\n        if (showSplitLine) {\n          var colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);\n          splitLines[colorIndex].push(new graphic.Circle({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r: ticksRadius[i].coord\n            }\n          }));\n        }\n\n        if (showSplitArea && i < ticksRadius.length - 1) {\n          var colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i);\n          splitAreas[colorIndex].push(new graphic.Ring({\n            shape: {\n              cx: cx,\n              cy: cy,\n              r0: ticksRadius[i].coord,\n              r: ticksRadius[i + 1].coord\n            }\n          }));\n        }\n      }\n    } // Polyyon\n    else {\n        var realSplitNumber_1;\n        var axesTicksPoints = zrUtil.map(indicatorAxes, function (indicatorAxis, idx) {\n          var ticksCoords = indicatorAxis.getTicksCoords();\n          realSplitNumber_1 = realSplitNumber_1 == null ? ticksCoords.length - 1 : Math.min(ticksCoords.length - 1, realSplitNumber_1);\n          return zrUtil.map(ticksCoords, function (tickCoord) {\n            return radar.coordToPoint(tickCoord.coord, idx);\n          });\n        });\n        var prevPoints = [];\n\n        for (var i = 0; i <= realSplitNumber_1; i++) {\n          var points = [];\n\n          for (var j = 0; j < indicatorAxes.length; j++) {\n            points.push(axesTicksPoints[j][i]);\n          } // Close\n\n\n          if (points[0]) {\n            points.push(points[0].slice());\n          } else {\n            if (process.env.NODE_ENV !== 'production') {\n              console.error('Can\\'t draw value axis ' + i);\n            }\n          }\n\n          if (showSplitLine) {\n            var colorIndex = getColorIndex(splitLines, splitLineColorsArr, i);\n            splitLines[colorIndex].push(new graphic.Polyline({\n              shape: {\n                points: points\n              }\n            }));\n          }\n\n          if (showSplitArea && prevPoints) {\n            var colorIndex = getColorIndex(splitAreas, splitAreaColorsArr, i - 1);\n            splitAreas[colorIndex].push(new graphic.Polygon({\n              shape: {\n                points: points.concat(prevPoints)\n              }\n            }));\n          }\n\n          prevPoints = points.slice().reverse();\n        }\n      }\n\n    var lineStyle = lineStyleModel.getLineStyle();\n    var areaStyle = areaStyleModel.getAreaStyle(); // Add splitArea before splitLine\n\n    zrUtil.each(splitAreas, function (splitAreas, idx) {\n      this.group.add(graphic.mergePath(splitAreas, {\n        style: zrUtil.defaults({\n          stroke: 'none',\n          fill: splitAreaColorsArr[idx % splitAreaColorsArr.length]\n        }, areaStyle),\n        silent: true\n      }));\n    }, this);\n    zrUtil.each(splitLines, function (splitLines, idx) {\n      this.group.add(graphic.mergePath(splitLines, {\n        style: zrUtil.defaults({\n          fill: 'none',\n          stroke: splitLineColorsArr[idx % splitLineColorsArr.length]\n        }, lineStyle),\n        silent: true\n      }));\n    }, this);\n  };\n\n  RadarView.type = 'radar';\n  return RadarView;\n}(ComponentView);\n\nexport default RadarView;"]},"metadata":{},"sourceType":"module"}