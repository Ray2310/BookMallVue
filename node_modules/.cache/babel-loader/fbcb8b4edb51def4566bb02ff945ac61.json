{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport * as imageHelper from '../helper/image.js';\nimport { extend, retrieve2, retrieve3, reduce } from '../../core/util.js';\nimport { getLineHeight, getWidth, parsePercent } from '../../contain/text.js';\nvar STYLE_REG = /\\{([a-zA-Z0-9_]+)\\|([^}]*)\\}/g;\nexport function truncateText(text, containerWidth, font, ellipsis, options) {\n  if (!containerWidth) {\n    return '';\n  }\n\n  var textLines = (text + '').split('\\n');\n  options = prepareTruncateOptions(containerWidth, font, ellipsis, options);\n\n  for (var i = 0, len = textLines.length; i < len; i++) {\n    textLines[i] = truncateSingleLine(textLines[i], options);\n  }\n\n  return textLines.join('\\n');\n}\n\nfunction prepareTruncateOptions(containerWidth, font, ellipsis, options) {\n  options = options || {};\n  var preparedOpts = extend({}, options);\n  preparedOpts.font = font;\n  ellipsis = retrieve2(ellipsis, '...');\n  preparedOpts.maxIterations = retrieve2(options.maxIterations, 2);\n  var minChar = preparedOpts.minChar = retrieve2(options.minChar, 0);\n  preparedOpts.cnCharWidth = getWidth('å›½', font);\n  var ascCharWidth = preparedOpts.ascCharWidth = getWidth('a', font);\n  preparedOpts.placeholder = retrieve2(options.placeholder, '');\n  var contentWidth = containerWidth = Math.max(0, containerWidth - 1);\n\n  for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n    contentWidth -= ascCharWidth;\n  }\n\n  var ellipsisWidth = getWidth(ellipsis, font);\n\n  if (ellipsisWidth > contentWidth) {\n    ellipsis = '';\n    ellipsisWidth = 0;\n  }\n\n  contentWidth = containerWidth - ellipsisWidth;\n  preparedOpts.ellipsis = ellipsis;\n  preparedOpts.ellipsisWidth = ellipsisWidth;\n  preparedOpts.contentWidth = contentWidth;\n  preparedOpts.containerWidth = containerWidth;\n  return preparedOpts;\n}\n\nfunction truncateSingleLine(textLine, options) {\n  var containerWidth = options.containerWidth;\n  var font = options.font;\n  var contentWidth = options.contentWidth;\n\n  if (!containerWidth) {\n    return '';\n  }\n\n  var lineWidth = getWidth(textLine, font);\n\n  if (lineWidth <= containerWidth) {\n    return textLine;\n  }\n\n  for (var j = 0;; j++) {\n    if (lineWidth <= contentWidth || j >= options.maxIterations) {\n      textLine += options.ellipsis;\n      break;\n    }\n\n    var subLength = j === 0 ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth) : lineWidth > 0 ? Math.floor(textLine.length * contentWidth / lineWidth) : 0;\n    textLine = textLine.substr(0, subLength);\n    lineWidth = getWidth(textLine, font);\n  }\n\n  if (textLine === '') {\n    textLine = options.placeholder;\n  }\n\n  return textLine;\n}\n\nfunction estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n  var width = 0;\n  var i = 0;\n\n  for (var len = text.length; i < len && width < contentWidth; i++) {\n    var charCode = text.charCodeAt(i);\n    width += 0 <= charCode && charCode <= 127 ? ascCharWidth : cnCharWidth;\n  }\n\n  return i;\n}\n\nexport function parsePlainText(text, style) {\n  text != null && (text += '');\n  var overflow = style.overflow;\n  var padding = style.padding;\n  var font = style.font;\n  var truncate = overflow === 'truncate';\n  var calculatedLineHeight = getLineHeight(font);\n  var lineHeight = retrieve2(style.lineHeight, calculatedLineHeight);\n  var bgColorDrawn = !!style.backgroundColor;\n  var truncateLineOverflow = style.lineOverflow === 'truncate';\n  var width = style.width;\n  var lines;\n\n  if (width != null && (overflow === 'break' || overflow === 'breakAll')) {\n    lines = text ? wrapText(text, style.font, width, overflow === 'breakAll', 0).lines : [];\n  } else {\n    lines = text ? text.split('\\n') : [];\n  }\n\n  var contentHeight = lines.length * lineHeight;\n  var height = retrieve2(style.height, contentHeight);\n\n  if (contentHeight > height && truncateLineOverflow) {\n    var lineCount = Math.floor(height / lineHeight);\n    lines = lines.slice(0, lineCount);\n  }\n\n  if (text && truncate && width != null) {\n    var options = prepareTruncateOptions(width, font, style.ellipsis, {\n      minChar: style.truncateMinChar,\n      placeholder: style.placeholder\n    });\n\n    for (var i = 0; i < lines.length; i++) {\n      lines[i] = truncateSingleLine(lines[i], options);\n    }\n  }\n\n  var outerHeight = height;\n  var contentWidth = 0;\n\n  for (var i = 0; i < lines.length; i++) {\n    contentWidth = Math.max(getWidth(lines[i], font), contentWidth);\n  }\n\n  if (width == null) {\n    width = contentWidth;\n  }\n\n  var outerWidth = contentWidth;\n\n  if (padding) {\n    outerHeight += padding[0] + padding[2];\n    outerWidth += padding[1] + padding[3];\n    width += padding[1] + padding[3];\n  }\n\n  if (bgColorDrawn) {\n    outerWidth = width;\n  }\n\n  return {\n    lines: lines,\n    height: height,\n    outerWidth: outerWidth,\n    outerHeight: outerHeight,\n    lineHeight: lineHeight,\n    calculatedLineHeight: calculatedLineHeight,\n    contentWidth: contentWidth,\n    contentHeight: contentHeight,\n    width: width\n  };\n}\n\nvar RichTextToken = function () {\n  function RichTextToken() {}\n\n  return RichTextToken;\n}();\n\nvar RichTextLine = function () {\n  function RichTextLine(tokens) {\n    this.tokens = [];\n\n    if (tokens) {\n      this.tokens = tokens;\n    }\n  }\n\n  return RichTextLine;\n}();\n\nvar RichTextContentBlock = function () {\n  function RichTextContentBlock() {\n    this.width = 0;\n    this.height = 0;\n    this.contentWidth = 0;\n    this.contentHeight = 0;\n    this.outerWidth = 0;\n    this.outerHeight = 0;\n    this.lines = [];\n  }\n\n  return RichTextContentBlock;\n}();\n\nexport { RichTextContentBlock };\nexport function parseRichText(text, style) {\n  var contentBlock = new RichTextContentBlock();\n  text != null && (text += '');\n\n  if (!text) {\n    return contentBlock;\n  }\n\n  var topWidth = style.width;\n  var topHeight = style.height;\n  var overflow = style.overflow;\n  var wrapInfo = (overflow === 'break' || overflow === 'breakAll') && topWidth != null ? {\n    width: topWidth,\n    accumWidth: 0,\n    breakAll: overflow === 'breakAll'\n  } : null;\n  var lastIndex = STYLE_REG.lastIndex = 0;\n  var result;\n\n  while ((result = STYLE_REG.exec(text)) != null) {\n    var matchedIndex = result.index;\n\n    if (matchedIndex > lastIndex) {\n      pushTokens(contentBlock, text.substring(lastIndex, matchedIndex), style, wrapInfo);\n    }\n\n    pushTokens(contentBlock, result[2], style, wrapInfo, result[1]);\n    lastIndex = STYLE_REG.lastIndex;\n  }\n\n  if (lastIndex < text.length) {\n    pushTokens(contentBlock, text.substring(lastIndex, text.length), style, wrapInfo);\n  }\n\n  var pendingList = [];\n  var calculatedHeight = 0;\n  var calculatedWidth = 0;\n  var stlPadding = style.padding;\n  var truncate = overflow === 'truncate';\n  var truncateLine = style.lineOverflow === 'truncate';\n\n  function finishLine(line, lineWidth, lineHeight) {\n    line.width = lineWidth;\n    line.lineHeight = lineHeight;\n    calculatedHeight += lineHeight;\n    calculatedWidth = Math.max(calculatedWidth, lineWidth);\n  }\n\n  outer: for (var i = 0; i < contentBlock.lines.length; i++) {\n    var line = contentBlock.lines[i];\n    var lineHeight = 0;\n    var lineWidth = 0;\n\n    for (var j = 0; j < line.tokens.length; j++) {\n      var token = line.tokens[j];\n      var tokenStyle = token.styleName && style.rich[token.styleName] || {};\n      var textPadding = token.textPadding = tokenStyle.padding;\n      var paddingH = textPadding ? textPadding[1] + textPadding[3] : 0;\n      var font = token.font = tokenStyle.font || style.font;\n      token.contentHeight = getLineHeight(font);\n      var tokenHeight = retrieve2(tokenStyle.height, token.contentHeight);\n      token.innerHeight = tokenHeight;\n      textPadding && (tokenHeight += textPadding[0] + textPadding[2]);\n      token.height = tokenHeight;\n      token.lineHeight = retrieve3(tokenStyle.lineHeight, style.lineHeight, tokenHeight);\n      token.align = tokenStyle && tokenStyle.align || style.align;\n      token.verticalAlign = tokenStyle && tokenStyle.verticalAlign || 'middle';\n\n      if (truncateLine && topHeight != null && calculatedHeight + token.lineHeight > topHeight) {\n        if (j > 0) {\n          line.tokens = line.tokens.slice(0, j);\n          finishLine(line, lineWidth, lineHeight);\n          contentBlock.lines = contentBlock.lines.slice(0, i + 1);\n        } else {\n          contentBlock.lines = contentBlock.lines.slice(0, i);\n        }\n\n        break outer;\n      }\n\n      var styleTokenWidth = tokenStyle.width;\n      var tokenWidthNotSpecified = styleTokenWidth == null || styleTokenWidth === 'auto';\n\n      if (typeof styleTokenWidth === 'string' && styleTokenWidth.charAt(styleTokenWidth.length - 1) === '%') {\n        token.percentWidth = styleTokenWidth;\n        pendingList.push(token);\n        token.contentWidth = getWidth(token.text, font);\n      } else {\n        if (tokenWidthNotSpecified) {\n          var textBackgroundColor = tokenStyle.backgroundColor;\n          var bgImg = textBackgroundColor && textBackgroundColor.image;\n\n          if (bgImg) {\n            bgImg = imageHelper.findExistImage(bgImg);\n\n            if (imageHelper.isImageReady(bgImg)) {\n              token.width = Math.max(token.width, bgImg.width * tokenHeight / bgImg.height);\n            }\n          }\n        }\n\n        var remainTruncWidth = truncate && topWidth != null ? topWidth - lineWidth : null;\n\n        if (remainTruncWidth != null && remainTruncWidth < token.width) {\n          if (!tokenWidthNotSpecified || remainTruncWidth < paddingH) {\n            token.text = '';\n            token.width = token.contentWidth = 0;\n          } else {\n            token.text = truncateText(token.text, remainTruncWidth - paddingH, font, style.ellipsis, {\n              minChar: style.truncateMinChar\n            });\n            token.width = token.contentWidth = getWidth(token.text, font);\n          }\n        } else {\n          token.contentWidth = getWidth(token.text, font);\n        }\n      }\n\n      token.width += paddingH;\n      lineWidth += token.width;\n      tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));\n    }\n\n    finishLine(line, lineWidth, lineHeight);\n  }\n\n  contentBlock.outerWidth = contentBlock.width = retrieve2(topWidth, calculatedWidth);\n  contentBlock.outerHeight = contentBlock.height = retrieve2(topHeight, calculatedHeight);\n  contentBlock.contentHeight = calculatedHeight;\n  contentBlock.contentWidth = calculatedWidth;\n\n  if (stlPadding) {\n    contentBlock.outerWidth += stlPadding[1] + stlPadding[3];\n    contentBlock.outerHeight += stlPadding[0] + stlPadding[2];\n  }\n\n  for (var i = 0; i < pendingList.length; i++) {\n    var token = pendingList[i];\n    var percentWidth = token.percentWidth;\n    token.width = parseInt(percentWidth, 10) / 100 * contentBlock.width;\n  }\n\n  return contentBlock;\n}\n\nfunction pushTokens(block, str, style, wrapInfo, styleName) {\n  var isEmptyStr = str === '';\n  var tokenStyle = styleName && style.rich[styleName] || {};\n  var lines = block.lines;\n  var font = tokenStyle.font || style.font;\n  var newLine = false;\n  var strLines;\n  var linesWidths;\n\n  if (wrapInfo) {\n    var tokenPadding = tokenStyle.padding;\n    var tokenPaddingH = tokenPadding ? tokenPadding[1] + tokenPadding[3] : 0;\n\n    if (tokenStyle.width != null && tokenStyle.width !== 'auto') {\n      var outerWidth_1 = parsePercent(tokenStyle.width, wrapInfo.width) + tokenPaddingH;\n\n      if (lines.length > 0) {\n        if (outerWidth_1 + wrapInfo.accumWidth > wrapInfo.width) {\n          strLines = str.split('\\n');\n          newLine = true;\n        }\n      }\n\n      wrapInfo.accumWidth = outerWidth_1;\n    } else {\n      var res = wrapText(str, font, wrapInfo.width, wrapInfo.breakAll, wrapInfo.accumWidth);\n      wrapInfo.accumWidth = res.accumWidth + tokenPaddingH;\n      linesWidths = res.linesWidths;\n      strLines = res.lines;\n    }\n  } else {\n    strLines = str.split('\\n');\n  }\n\n  for (var i = 0; i < strLines.length; i++) {\n    var text = strLines[i];\n    var token = new RichTextToken();\n    token.styleName = styleName;\n    token.text = text;\n    token.isLineHolder = !text && !isEmptyStr;\n\n    if (typeof tokenStyle.width === 'number') {\n      token.width = tokenStyle.width;\n    } else {\n      token.width = linesWidths ? linesWidths[i] : getWidth(text, font);\n    }\n\n    if (!i && !newLine) {\n      var tokens = (lines[lines.length - 1] || (lines[0] = new RichTextLine())).tokens;\n      var tokensLen = tokens.length;\n      tokensLen === 1 && tokens[0].isLineHolder ? tokens[0] = token : (text || !tokensLen || isEmptyStr) && tokens.push(token);\n    } else {\n      lines.push(new RichTextLine([token]));\n    }\n  }\n}\n\nfunction isAlphabeticLetter(ch) {\n  var code = ch.charCodeAt(0);\n  return code >= 0x20 && code <= 0x24F || code >= 0x370 && code <= 0x10FF || code >= 0x1200 && code <= 0x13FF || code >= 0x1E00 && code <= 0x206F;\n}\n\nvar breakCharMap = reduce(',&?/;] '.split(''), function (obj, ch) {\n  obj[ch] = true;\n  return obj;\n}, {});\n\nfunction isWordBreakChar(ch) {\n  if (isAlphabeticLetter(ch)) {\n    if (breakCharMap[ch]) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return true;\n}\n\nfunction wrapText(text, font, lineWidth, isBreakAll, lastAccumWidth) {\n  var lines = [];\n  var linesWidths = [];\n  var line = '';\n  var currentWord = '';\n  var currentWordWidth = 0;\n  var accumWidth = 0;\n\n  for (var i = 0; i < text.length; i++) {\n    var ch = text.charAt(i);\n\n    if (ch === '\\n') {\n      if (currentWord) {\n        line += currentWord;\n        accumWidth += currentWordWidth;\n      }\n\n      lines.push(line);\n      linesWidths.push(accumWidth);\n      line = '';\n      currentWord = '';\n      currentWordWidth = 0;\n      accumWidth = 0;\n      continue;\n    }\n\n    var chWidth = getWidth(ch, font);\n    var inWord = isBreakAll ? false : !isWordBreakChar(ch);\n\n    if (!lines.length ? lastAccumWidth + accumWidth + chWidth > lineWidth : accumWidth + chWidth > lineWidth) {\n      if (!accumWidth) {\n        if (inWord) {\n          lines.push(currentWord);\n          linesWidths.push(currentWordWidth);\n          currentWord = ch;\n          currentWordWidth = chWidth;\n        } else {\n          lines.push(ch);\n          linesWidths.push(chWidth);\n        }\n      } else if (line || currentWord) {\n        if (inWord) {\n          if (!line) {\n            line = currentWord;\n            currentWord = '';\n            currentWordWidth = 0;\n            accumWidth = currentWordWidth;\n          }\n\n          lines.push(line);\n          linesWidths.push(accumWidth - currentWordWidth);\n          currentWord += ch;\n          currentWordWidth += chWidth;\n          line = '';\n          accumWidth = currentWordWidth;\n        } else {\n          if (currentWord) {\n            line += currentWord;\n            currentWord = '';\n            currentWordWidth = 0;\n          }\n\n          lines.push(line);\n          linesWidths.push(accumWidth);\n          line = ch;\n          accumWidth = chWidth;\n        }\n      }\n\n      continue;\n    }\n\n    accumWidth += chWidth;\n\n    if (inWord) {\n      currentWord += ch;\n      currentWordWidth += chWidth;\n    } else {\n      if (currentWord) {\n        line += currentWord;\n        currentWord = '';\n        currentWordWidth = 0;\n      }\n\n      line += ch;\n    }\n  }\n\n  if (!lines.length && !line) {\n    line = text;\n    currentWord = '';\n    currentWordWidth = 0;\n  }\n\n  if (currentWord) {\n    line += currentWord;\n  }\n\n  if (line) {\n    lines.push(line);\n    linesWidths.push(accumWidth);\n  }\n\n  if (lines.length === 1) {\n    accumWidth += lastAccumWidth;\n  }\n\n  return {\n    accumWidth: accumWidth,\n    lines: lines,\n    linesWidths: linesWidths\n  };\n}","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/ElectronicMallVue/node_modules/zrender/lib/graphic/helper/parseText.js"],"names":["imageHelper","extend","retrieve2","retrieve3","reduce","getLineHeight","getWidth","parsePercent","STYLE_REG","truncateText","text","containerWidth","font","ellipsis","options","textLines","split","prepareTruncateOptions","i","len","length","truncateSingleLine","join","preparedOpts","maxIterations","minChar","cnCharWidth","ascCharWidth","placeholder","contentWidth","Math","max","ellipsisWidth","textLine","lineWidth","j","subLength","estimateLength","floor","substr","width","charCode","charCodeAt","parsePlainText","style","overflow","padding","truncate","calculatedLineHeight","lineHeight","bgColorDrawn","backgroundColor","truncateLineOverflow","lineOverflow","lines","wrapText","contentHeight","height","lineCount","slice","truncateMinChar","outerHeight","outerWidth","RichTextToken","RichTextLine","tokens","RichTextContentBlock","parseRichText","contentBlock","topWidth","topHeight","wrapInfo","accumWidth","breakAll","lastIndex","result","exec","matchedIndex","index","pushTokens","substring","pendingList","calculatedHeight","calculatedWidth","stlPadding","truncateLine","finishLine","line","outer","token","tokenStyle","styleName","rich","textPadding","paddingH","tokenHeight","innerHeight","align","verticalAlign","styleTokenWidth","tokenWidthNotSpecified","charAt","percentWidth","push","textBackgroundColor","bgImg","image","findExistImage","isImageReady","remainTruncWidth","parseInt","block","str","isEmptyStr","newLine","strLines","linesWidths","tokenPadding","tokenPaddingH","outerWidth_1","res","isLineHolder","tokensLen","isAlphabeticLetter","ch","code","breakCharMap","obj","isWordBreakChar","isBreakAll","lastAccumWidth","currentWord","currentWordWidth","chWidth","inWord"],"mappings":"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","sourcesContent":["import * as imageHelper from '../helper/image.js';\nimport { extend, retrieve2, retrieve3, reduce } from '../../core/util.js';\nimport { getLineHeight, getWidth, parsePercent } from '../../contain/text.js';\nvar STYLE_REG = /\\{([a-zA-Z0-9_]+)\\|([^}]*)\\}/g;\nexport function truncateText(text, containerWidth, font, ellipsis, options) {\n    if (!containerWidth) {\n        return '';\n    }\n    var textLines = (text + '').split('\\n');\n    options = prepareTruncateOptions(containerWidth, font, ellipsis, options);\n    for (var i = 0, len = textLines.length; i < len; i++) {\n        textLines[i] = truncateSingleLine(textLines[i], options);\n    }\n    return textLines.join('\\n');\n}\nfunction prepareTruncateOptions(containerWidth, font, ellipsis, options) {\n    options = options || {};\n    var preparedOpts = extend({}, options);\n    preparedOpts.font = font;\n    ellipsis = retrieve2(ellipsis, '...');\n    preparedOpts.maxIterations = retrieve2(options.maxIterations, 2);\n    var minChar = preparedOpts.minChar = retrieve2(options.minChar, 0);\n    preparedOpts.cnCharWidth = getWidth('å›½', font);\n    var ascCharWidth = preparedOpts.ascCharWidth = getWidth('a', font);\n    preparedOpts.placeholder = retrieve2(options.placeholder, '');\n    var contentWidth = containerWidth = Math.max(0, containerWidth - 1);\n    for (var i = 0; i < minChar && contentWidth >= ascCharWidth; i++) {\n        contentWidth -= ascCharWidth;\n    }\n    var ellipsisWidth = getWidth(ellipsis, font);\n    if (ellipsisWidth > contentWidth) {\n        ellipsis = '';\n        ellipsisWidth = 0;\n    }\n    contentWidth = containerWidth - ellipsisWidth;\n    preparedOpts.ellipsis = ellipsis;\n    preparedOpts.ellipsisWidth = ellipsisWidth;\n    preparedOpts.contentWidth = contentWidth;\n    preparedOpts.containerWidth = containerWidth;\n    return preparedOpts;\n}\nfunction truncateSingleLine(textLine, options) {\n    var containerWidth = options.containerWidth;\n    var font = options.font;\n    var contentWidth = options.contentWidth;\n    if (!containerWidth) {\n        return '';\n    }\n    var lineWidth = getWidth(textLine, font);\n    if (lineWidth <= containerWidth) {\n        return textLine;\n    }\n    for (var j = 0;; j++) {\n        if (lineWidth <= contentWidth || j >= options.maxIterations) {\n            textLine += options.ellipsis;\n            break;\n        }\n        var subLength = j === 0\n            ? estimateLength(textLine, contentWidth, options.ascCharWidth, options.cnCharWidth)\n            : lineWidth > 0\n                ? Math.floor(textLine.length * contentWidth / lineWidth)\n                : 0;\n        textLine = textLine.substr(0, subLength);\n        lineWidth = getWidth(textLine, font);\n    }\n    if (textLine === '') {\n        textLine = options.placeholder;\n    }\n    return textLine;\n}\nfunction estimateLength(text, contentWidth, ascCharWidth, cnCharWidth) {\n    var width = 0;\n    var i = 0;\n    for (var len = text.length; i < len && width < contentWidth; i++) {\n        var charCode = text.charCodeAt(i);\n        width += (0 <= charCode && charCode <= 127) ? ascCharWidth : cnCharWidth;\n    }\n    return i;\n}\nexport function parsePlainText(text, style) {\n    text != null && (text += '');\n    var overflow = style.overflow;\n    var padding = style.padding;\n    var font = style.font;\n    var truncate = overflow === 'truncate';\n    var calculatedLineHeight = getLineHeight(font);\n    var lineHeight = retrieve2(style.lineHeight, calculatedLineHeight);\n    var bgColorDrawn = !!(style.backgroundColor);\n    var truncateLineOverflow = style.lineOverflow === 'truncate';\n    var width = style.width;\n    var lines;\n    if (width != null && (overflow === 'break' || overflow === 'breakAll')) {\n        lines = text ? wrapText(text, style.font, width, overflow === 'breakAll', 0).lines : [];\n    }\n    else {\n        lines = text ? text.split('\\n') : [];\n    }\n    var contentHeight = lines.length * lineHeight;\n    var height = retrieve2(style.height, contentHeight);\n    if (contentHeight > height && truncateLineOverflow) {\n        var lineCount = Math.floor(height / lineHeight);\n        lines = lines.slice(0, lineCount);\n    }\n    if (text && truncate && width != null) {\n        var options = prepareTruncateOptions(width, font, style.ellipsis, {\n            minChar: style.truncateMinChar,\n            placeholder: style.placeholder\n        });\n        for (var i = 0; i < lines.length; i++) {\n            lines[i] = truncateSingleLine(lines[i], options);\n        }\n    }\n    var outerHeight = height;\n    var contentWidth = 0;\n    for (var i = 0; i < lines.length; i++) {\n        contentWidth = Math.max(getWidth(lines[i], font), contentWidth);\n    }\n    if (width == null) {\n        width = contentWidth;\n    }\n    var outerWidth = contentWidth;\n    if (padding) {\n        outerHeight += padding[0] + padding[2];\n        outerWidth += padding[1] + padding[3];\n        width += padding[1] + padding[3];\n    }\n    if (bgColorDrawn) {\n        outerWidth = width;\n    }\n    return {\n        lines: lines,\n        height: height,\n        outerWidth: outerWidth,\n        outerHeight: outerHeight,\n        lineHeight: lineHeight,\n        calculatedLineHeight: calculatedLineHeight,\n        contentWidth: contentWidth,\n        contentHeight: contentHeight,\n        width: width\n    };\n}\nvar RichTextToken = (function () {\n    function RichTextToken() {\n    }\n    return RichTextToken;\n}());\nvar RichTextLine = (function () {\n    function RichTextLine(tokens) {\n        this.tokens = [];\n        if (tokens) {\n            this.tokens = tokens;\n        }\n    }\n    return RichTextLine;\n}());\nvar RichTextContentBlock = (function () {\n    function RichTextContentBlock() {\n        this.width = 0;\n        this.height = 0;\n        this.contentWidth = 0;\n        this.contentHeight = 0;\n        this.outerWidth = 0;\n        this.outerHeight = 0;\n        this.lines = [];\n    }\n    return RichTextContentBlock;\n}());\nexport { RichTextContentBlock };\nexport function parseRichText(text, style) {\n    var contentBlock = new RichTextContentBlock();\n    text != null && (text += '');\n    if (!text) {\n        return contentBlock;\n    }\n    var topWidth = style.width;\n    var topHeight = style.height;\n    var overflow = style.overflow;\n    var wrapInfo = (overflow === 'break' || overflow === 'breakAll') && topWidth != null\n        ? { width: topWidth, accumWidth: 0, breakAll: overflow === 'breakAll' }\n        : null;\n    var lastIndex = STYLE_REG.lastIndex = 0;\n    var result;\n    while ((result = STYLE_REG.exec(text)) != null) {\n        var matchedIndex = result.index;\n        if (matchedIndex > lastIndex) {\n            pushTokens(contentBlock, text.substring(lastIndex, matchedIndex), style, wrapInfo);\n        }\n        pushTokens(contentBlock, result[2], style, wrapInfo, result[1]);\n        lastIndex = STYLE_REG.lastIndex;\n    }\n    if (lastIndex < text.length) {\n        pushTokens(contentBlock, text.substring(lastIndex, text.length), style, wrapInfo);\n    }\n    var pendingList = [];\n    var calculatedHeight = 0;\n    var calculatedWidth = 0;\n    var stlPadding = style.padding;\n    var truncate = overflow === 'truncate';\n    var truncateLine = style.lineOverflow === 'truncate';\n    function finishLine(line, lineWidth, lineHeight) {\n        line.width = lineWidth;\n        line.lineHeight = lineHeight;\n        calculatedHeight += lineHeight;\n        calculatedWidth = Math.max(calculatedWidth, lineWidth);\n    }\n    outer: for (var i = 0; i < contentBlock.lines.length; i++) {\n        var line = contentBlock.lines[i];\n        var lineHeight = 0;\n        var lineWidth = 0;\n        for (var j = 0; j < line.tokens.length; j++) {\n            var token = line.tokens[j];\n            var tokenStyle = token.styleName && style.rich[token.styleName] || {};\n            var textPadding = token.textPadding = tokenStyle.padding;\n            var paddingH = textPadding ? textPadding[1] + textPadding[3] : 0;\n            var font = token.font = tokenStyle.font || style.font;\n            token.contentHeight = getLineHeight(font);\n            var tokenHeight = retrieve2(tokenStyle.height, token.contentHeight);\n            token.innerHeight = tokenHeight;\n            textPadding && (tokenHeight += textPadding[0] + textPadding[2]);\n            token.height = tokenHeight;\n            token.lineHeight = retrieve3(tokenStyle.lineHeight, style.lineHeight, tokenHeight);\n            token.align = tokenStyle && tokenStyle.align || style.align;\n            token.verticalAlign = tokenStyle && tokenStyle.verticalAlign || 'middle';\n            if (truncateLine && topHeight != null && calculatedHeight + token.lineHeight > topHeight) {\n                if (j > 0) {\n                    line.tokens = line.tokens.slice(0, j);\n                    finishLine(line, lineWidth, lineHeight);\n                    contentBlock.lines = contentBlock.lines.slice(0, i + 1);\n                }\n                else {\n                    contentBlock.lines = contentBlock.lines.slice(0, i);\n                }\n                break outer;\n            }\n            var styleTokenWidth = tokenStyle.width;\n            var tokenWidthNotSpecified = styleTokenWidth == null || styleTokenWidth === 'auto';\n            if (typeof styleTokenWidth === 'string' && styleTokenWidth.charAt(styleTokenWidth.length - 1) === '%') {\n                token.percentWidth = styleTokenWidth;\n                pendingList.push(token);\n                token.contentWidth = getWidth(token.text, font);\n            }\n            else {\n                if (tokenWidthNotSpecified) {\n                    var textBackgroundColor = tokenStyle.backgroundColor;\n                    var bgImg = textBackgroundColor && textBackgroundColor.image;\n                    if (bgImg) {\n                        bgImg = imageHelper.findExistImage(bgImg);\n                        if (imageHelper.isImageReady(bgImg)) {\n                            token.width = Math.max(token.width, bgImg.width * tokenHeight / bgImg.height);\n                        }\n                    }\n                }\n                var remainTruncWidth = truncate && topWidth != null\n                    ? topWidth - lineWidth : null;\n                if (remainTruncWidth != null && remainTruncWidth < token.width) {\n                    if (!tokenWidthNotSpecified || remainTruncWidth < paddingH) {\n                        token.text = '';\n                        token.width = token.contentWidth = 0;\n                    }\n                    else {\n                        token.text = truncateText(token.text, remainTruncWidth - paddingH, font, style.ellipsis, { minChar: style.truncateMinChar });\n                        token.width = token.contentWidth = getWidth(token.text, font);\n                    }\n                }\n                else {\n                    token.contentWidth = getWidth(token.text, font);\n                }\n            }\n            token.width += paddingH;\n            lineWidth += token.width;\n            tokenStyle && (lineHeight = Math.max(lineHeight, token.lineHeight));\n        }\n        finishLine(line, lineWidth, lineHeight);\n    }\n    contentBlock.outerWidth = contentBlock.width = retrieve2(topWidth, calculatedWidth);\n    contentBlock.outerHeight = contentBlock.height = retrieve2(topHeight, calculatedHeight);\n    contentBlock.contentHeight = calculatedHeight;\n    contentBlock.contentWidth = calculatedWidth;\n    if (stlPadding) {\n        contentBlock.outerWidth += stlPadding[1] + stlPadding[3];\n        contentBlock.outerHeight += stlPadding[0] + stlPadding[2];\n    }\n    for (var i = 0; i < pendingList.length; i++) {\n        var token = pendingList[i];\n        var percentWidth = token.percentWidth;\n        token.width = parseInt(percentWidth, 10) / 100 * contentBlock.width;\n    }\n    return contentBlock;\n}\nfunction pushTokens(block, str, style, wrapInfo, styleName) {\n    var isEmptyStr = str === '';\n    var tokenStyle = styleName && style.rich[styleName] || {};\n    var lines = block.lines;\n    var font = tokenStyle.font || style.font;\n    var newLine = false;\n    var strLines;\n    var linesWidths;\n    if (wrapInfo) {\n        var tokenPadding = tokenStyle.padding;\n        var tokenPaddingH = tokenPadding ? tokenPadding[1] + tokenPadding[3] : 0;\n        if (tokenStyle.width != null && tokenStyle.width !== 'auto') {\n            var outerWidth_1 = parsePercent(tokenStyle.width, wrapInfo.width) + tokenPaddingH;\n            if (lines.length > 0) {\n                if (outerWidth_1 + wrapInfo.accumWidth > wrapInfo.width) {\n                    strLines = str.split('\\n');\n                    newLine = true;\n                }\n            }\n            wrapInfo.accumWidth = outerWidth_1;\n        }\n        else {\n            var res = wrapText(str, font, wrapInfo.width, wrapInfo.breakAll, wrapInfo.accumWidth);\n            wrapInfo.accumWidth = res.accumWidth + tokenPaddingH;\n            linesWidths = res.linesWidths;\n            strLines = res.lines;\n        }\n    }\n    else {\n        strLines = str.split('\\n');\n    }\n    for (var i = 0; i < strLines.length; i++) {\n        var text = strLines[i];\n        var token = new RichTextToken();\n        token.styleName = styleName;\n        token.text = text;\n        token.isLineHolder = !text && !isEmptyStr;\n        if (typeof tokenStyle.width === 'number') {\n            token.width = tokenStyle.width;\n        }\n        else {\n            token.width = linesWidths\n                ? linesWidths[i]\n                : getWidth(text, font);\n        }\n        if (!i && !newLine) {\n            var tokens = (lines[lines.length - 1] || (lines[0] = new RichTextLine())).tokens;\n            var tokensLen = tokens.length;\n            (tokensLen === 1 && tokens[0].isLineHolder)\n                ? (tokens[0] = token)\n                : ((text || !tokensLen || isEmptyStr) && tokens.push(token));\n        }\n        else {\n            lines.push(new RichTextLine([token]));\n        }\n    }\n}\nfunction isAlphabeticLetter(ch) {\n    var code = ch.charCodeAt(0);\n    return code >= 0x20 && code <= 0x24F\n        || code >= 0x370 && code <= 0x10FF\n        || code >= 0x1200 && code <= 0x13FF\n        || code >= 0x1E00 && code <= 0x206F;\n}\nvar breakCharMap = reduce(',&?/;] '.split(''), function (obj, ch) {\n    obj[ch] = true;\n    return obj;\n}, {});\nfunction isWordBreakChar(ch) {\n    if (isAlphabeticLetter(ch)) {\n        if (breakCharMap[ch]) {\n            return true;\n        }\n        return false;\n    }\n    return true;\n}\nfunction wrapText(text, font, lineWidth, isBreakAll, lastAccumWidth) {\n    var lines = [];\n    var linesWidths = [];\n    var line = '';\n    var currentWord = '';\n    var currentWordWidth = 0;\n    var accumWidth = 0;\n    for (var i = 0; i < text.length; i++) {\n        var ch = text.charAt(i);\n        if (ch === '\\n') {\n            if (currentWord) {\n                line += currentWord;\n                accumWidth += currentWordWidth;\n            }\n            lines.push(line);\n            linesWidths.push(accumWidth);\n            line = '';\n            currentWord = '';\n            currentWordWidth = 0;\n            accumWidth = 0;\n            continue;\n        }\n        var chWidth = getWidth(ch, font);\n        var inWord = isBreakAll ? false : !isWordBreakChar(ch);\n        if (!lines.length\n            ? lastAccumWidth + accumWidth + chWidth > lineWidth\n            : accumWidth + chWidth > lineWidth) {\n            if (!accumWidth) {\n                if (inWord) {\n                    lines.push(currentWord);\n                    linesWidths.push(currentWordWidth);\n                    currentWord = ch;\n                    currentWordWidth = chWidth;\n                }\n                else {\n                    lines.push(ch);\n                    linesWidths.push(chWidth);\n                }\n            }\n            else if (line || currentWord) {\n                if (inWord) {\n                    if (!line) {\n                        line = currentWord;\n                        currentWord = '';\n                        currentWordWidth = 0;\n                        accumWidth = currentWordWidth;\n                    }\n                    lines.push(line);\n                    linesWidths.push(accumWidth - currentWordWidth);\n                    currentWord += ch;\n                    currentWordWidth += chWidth;\n                    line = '';\n                    accumWidth = currentWordWidth;\n                }\n                else {\n                    if (currentWord) {\n                        line += currentWord;\n                        currentWord = '';\n                        currentWordWidth = 0;\n                    }\n                    lines.push(line);\n                    linesWidths.push(accumWidth);\n                    line = ch;\n                    accumWidth = chWidth;\n                }\n            }\n            continue;\n        }\n        accumWidth += chWidth;\n        if (inWord) {\n            currentWord += ch;\n            currentWordWidth += chWidth;\n        }\n        else {\n            if (currentWord) {\n                line += currentWord;\n                currentWord = '';\n                currentWordWidth = 0;\n            }\n            line += ch;\n        }\n    }\n    if (!lines.length && !line) {\n        line = text;\n        currentWord = '';\n        currentWordWidth = 0;\n    }\n    if (currentWord) {\n        line += currentWord;\n    }\n    if (line) {\n        lines.push(line);\n        linesWidths.push(accumWidth);\n    }\n    if (lines.length === 1) {\n        accumWidth += lastAccumWidth;\n    }\n    return {\n        accumWidth: accumWidth,\n        lines: lines,\n        linesWidths: linesWidths\n    };\n}\n"]},"metadata":{},"sourceType":"module"}