{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport BoundingRect from 'zrender/lib/core/BoundingRect.js';\nimport View from '../View.js';\nimport geoSourceManager from './geoSourceManager.js';\nimport { SINGLE_REFERRING } from '../../util/model.js';\nimport { warn } from '../../util/log.js';\nvar GEO_DEFAULT_PARAMS = {\n  'geoJSON': {\n    aspectScale: 0.75,\n    invertLongitute: true\n  },\n  'geoSVG': {\n    aspectScale: 1,\n    invertLongitute: false\n  }\n};\nexport var geo2DDimensions = ['lng', 'lat'];\n\nvar Geo =\n/** @class */\nfunction (_super) {\n  __extends(Geo, _super);\n\n  function Geo(name, map, opt) {\n    var _this = _super.call(this, name) || this;\n\n    _this.dimensions = geo2DDimensions;\n    _this.type = 'geo'; // Only store specified name coord via `addGeoCoord`.\n\n    _this._nameCoordMap = zrUtil.createHashMap();\n    _this.map = map;\n    var projection = opt.projection;\n    var source = geoSourceManager.load(map, opt.nameMap, opt.nameProperty);\n    var resource = geoSourceManager.getGeoResource(map);\n    var resourceType = _this.resourceType = resource ? resource.type : null;\n    var regions = _this.regions = source.regions;\n    var defaultParams = GEO_DEFAULT_PARAMS[resource.type];\n    _this._regionsMap = source.regionsMap;\n    _this.regions = source.regions;\n\n    if (process.env.NODE_ENV !== 'production' && projection) {\n      // Do some check\n      if (resourceType === 'geoSVG') {\n        if (process.env.NODE_ENV !== 'production') {\n          warn(\"Map \" + map + \" with SVG source can't use projection. Only GeoJSON source supports projection.\");\n        }\n\n        projection = null;\n      }\n\n      if (!(projection.project && projection.unproject)) {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('project and unproject must be both provided in the projeciton.');\n        }\n\n        projection = null;\n      }\n    }\n\n    _this.projection = projection;\n    var boundingRect;\n\n    if (projection) {\n      // Can't reuse the raw bounding rect\n      for (var i = 0; i < regions.length; i++) {\n        var regionRect = regions[i].getBoundingRect(projection);\n        boundingRect = boundingRect || regionRect.clone();\n        boundingRect.union(regionRect);\n      }\n    } else {\n      boundingRect = source.boundingRect;\n    }\n\n    _this.setBoundingRect(boundingRect.x, boundingRect.y, boundingRect.width, boundingRect.height); // aspectScale and invertLongitute actually is the parameters default raw projection.\n    // So we ignore them if projection is given.\n    // Ignore default aspect scale if projection exits.\n\n\n    _this.aspectScale = projection ? 1 : zrUtil.retrieve2(opt.aspectScale, defaultParams.aspectScale); // Not invert longitude if projection exits.\n\n    _this._invertLongitute = projection ? false : defaultParams.invertLongitute;\n    return _this;\n  }\n\n  Geo.prototype._transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var invertLongitute = this._invertLongitute;\n    rect = rect.clone();\n\n    if (invertLongitute) {\n      // Longitude is inverted.\n      rect.y = -rect.y - rect.height;\n    }\n\n    var rawTransformable = this._rawTransformable;\n    rawTransformable.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\n    var rawParent = rawTransformable.parent;\n    rawTransformable.parent = null;\n    rawTransformable.decomposeTransform();\n    rawTransformable.parent = rawParent;\n\n    if (invertLongitute) {\n      rawTransformable.scaleY = -rawTransformable.scaleY;\n    }\n\n    this._updateTransform();\n  };\n\n  Geo.prototype.getRegion = function (name) {\n    return this._regionsMap.get(name);\n  };\n\n  Geo.prototype.getRegionByCoord = function (coord) {\n    var regions = this.regions;\n\n    for (var i = 0; i < regions.length; i++) {\n      var region = regions[i];\n\n      if (region.type === 'geoJSON' && region.contain(coord)) {\n        return regions[i];\n      }\n    }\n  };\n  /**\n   * Add geoCoord for indexing by name\n   */\n\n\n  Geo.prototype.addGeoCoord = function (name, geoCoord) {\n    this._nameCoordMap.set(name, geoCoord);\n  };\n  /**\n   * Get geoCoord by name\n   */\n\n\n  Geo.prototype.getGeoCoord = function (name) {\n    var region = this._regionsMap.get(name); // Calculate center only on demand.\n\n\n    return this._nameCoordMap.get(name) || region && region.getCenter();\n  };\n\n  Geo.prototype.dataToPoint = function (data, noRoam, out) {\n    if (zrUtil.isString(data)) {\n      // Map area name to geoCoord\n      data = this.getGeoCoord(data);\n    }\n\n    if (data) {\n      var projection = this.projection;\n\n      if (projection) {\n        // projection may return null point.\n        data = projection.project(data);\n      }\n\n      return data && this.projectedToPoint(data, noRoam, out);\n    }\n  };\n\n  Geo.prototype.pointToData = function (point) {\n    var projection = this.projection;\n\n    if (projection) {\n      // projection may return null point.\n      point = projection.unproject(point);\n    }\n\n    return point && this.pointToProjected(point);\n  };\n  /**\n   * Point to projected data. Same with pointToData when projection is used.\n   */\n\n\n  Geo.prototype.pointToProjected = function (point) {\n    return _super.prototype.pointToData.call(this, point);\n  };\n\n  Geo.prototype.projectedToPoint = function (projected, noRoam, out) {\n    return _super.prototype.dataToPoint.call(this, projected, noRoam, out);\n  };\n\n  Geo.prototype.convertToPixel = function (ecModel, finder, value) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? coordSys.dataToPoint(value) : null;\n  };\n\n  Geo.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? coordSys.pointToData(pixel) : null;\n  };\n\n  return Geo;\n}(View);\n\n;\nzrUtil.mixin(Geo, View);\n\nfunction getCoordSys(finder) {\n  var geoModel = finder.geoModel;\n  var seriesModel = finder.seriesModel;\n  return geoModel ? geoModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem // For map series.\n  || (seriesModel.getReferringComponents('geo', SINGLE_REFERRING).models[0] || {}).coordinateSystem : null;\n}\n\nexport default Geo;","map":{"version":3,"sources":["/home/rayce/Udatabase/study/ElectronicMall/ElectronicMallVue/node_modules/echarts/lib/coord/geo/Geo.js"],"names":["__extends","zrUtil","BoundingRect","View","geoSourceManager","SINGLE_REFERRING","warn","GEO_DEFAULT_PARAMS","aspectScale","invertLongitute","geo2DDimensions","Geo","_super","name","map","opt","_this","call","dimensions","type","_nameCoordMap","createHashMap","projection","source","load","nameMap","nameProperty","resource","getGeoResource","resourceType","regions","defaultParams","_regionsMap","regionsMap","process","env","NODE_ENV","project","unproject","boundingRect","i","length","regionRect","getBoundingRect","clone","union","setBoundingRect","x","y","width","height","retrieve2","_invertLongitute","prototype","_transformTo","rect","rawTransformable","_rawTransformable","transform","calculateTransform","rawParent","parent","decomposeTransform","scaleY","_updateTransform","getRegion","get","getRegionByCoord","coord","region","contain","addGeoCoord","geoCoord","set","getGeoCoord","getCenter","dataToPoint","data","noRoam","out","isString","projectedToPoint","pointToData","point","pointToProjected","projected","convertToPixel","ecModel","finder","value","coordSys","getCoordSys","convertFromPixel","pixel","mixin","geoModel","seriesModel","coordinateSystem","getReferringComponents","models"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport BoundingRect from 'zrender/lib/core/BoundingRect.js';\nimport View from '../View.js';\nimport geoSourceManager from './geoSourceManager.js';\nimport { SINGLE_REFERRING } from '../../util/model.js';\nimport { warn } from '../../util/log.js';\nvar GEO_DEFAULT_PARAMS = {\n  'geoJSON': {\n    aspectScale: 0.75,\n    invertLongitute: true\n  },\n  'geoSVG': {\n    aspectScale: 1,\n    invertLongitute: false\n  }\n};\nexport var geo2DDimensions = ['lng', 'lat'];\n\nvar Geo =\n/** @class */\nfunction (_super) {\n  __extends(Geo, _super);\n\n  function Geo(name, map, opt) {\n    var _this = _super.call(this, name) || this;\n\n    _this.dimensions = geo2DDimensions;\n    _this.type = 'geo'; // Only store specified name coord via `addGeoCoord`.\n\n    _this._nameCoordMap = zrUtil.createHashMap();\n    _this.map = map;\n    var projection = opt.projection;\n    var source = geoSourceManager.load(map, opt.nameMap, opt.nameProperty);\n    var resource = geoSourceManager.getGeoResource(map);\n    var resourceType = _this.resourceType = resource ? resource.type : null;\n    var regions = _this.regions = source.regions;\n    var defaultParams = GEO_DEFAULT_PARAMS[resource.type];\n    _this._regionsMap = source.regionsMap;\n    _this.regions = source.regions;\n\n    if (process.env.NODE_ENV !== 'production' && projection) {\n      // Do some check\n      if (resourceType === 'geoSVG') {\n        if (process.env.NODE_ENV !== 'production') {\n          warn(\"Map \" + map + \" with SVG source can't use projection. Only GeoJSON source supports projection.\");\n        }\n\n        projection = null;\n      }\n\n      if (!(projection.project && projection.unproject)) {\n        if (process.env.NODE_ENV !== 'production') {\n          warn('project and unproject must be both provided in the projeciton.');\n        }\n\n        projection = null;\n      }\n    }\n\n    _this.projection = projection;\n    var boundingRect;\n\n    if (projection) {\n      // Can't reuse the raw bounding rect\n      for (var i = 0; i < regions.length; i++) {\n        var regionRect = regions[i].getBoundingRect(projection);\n        boundingRect = boundingRect || regionRect.clone();\n        boundingRect.union(regionRect);\n      }\n    } else {\n      boundingRect = source.boundingRect;\n    }\n\n    _this.setBoundingRect(boundingRect.x, boundingRect.y, boundingRect.width, boundingRect.height); // aspectScale and invertLongitute actually is the parameters default raw projection.\n    // So we ignore them if projection is given.\n    // Ignore default aspect scale if projection exits.\n\n\n    _this.aspectScale = projection ? 1 : zrUtil.retrieve2(opt.aspectScale, defaultParams.aspectScale); // Not invert longitude if projection exits.\n\n    _this._invertLongitute = projection ? false : defaultParams.invertLongitute;\n    return _this;\n  }\n\n  Geo.prototype._transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var invertLongitute = this._invertLongitute;\n    rect = rect.clone();\n\n    if (invertLongitute) {\n      // Longitude is inverted.\n      rect.y = -rect.y - rect.height;\n    }\n\n    var rawTransformable = this._rawTransformable;\n    rawTransformable.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\n    var rawParent = rawTransformable.parent;\n    rawTransformable.parent = null;\n    rawTransformable.decomposeTransform();\n    rawTransformable.parent = rawParent;\n\n    if (invertLongitute) {\n      rawTransformable.scaleY = -rawTransformable.scaleY;\n    }\n\n    this._updateTransform();\n  };\n\n  Geo.prototype.getRegion = function (name) {\n    return this._regionsMap.get(name);\n  };\n\n  Geo.prototype.getRegionByCoord = function (coord) {\n    var regions = this.regions;\n\n    for (var i = 0; i < regions.length; i++) {\n      var region = regions[i];\n\n      if (region.type === 'geoJSON' && region.contain(coord)) {\n        return regions[i];\n      }\n    }\n  };\n  /**\n   * Add geoCoord for indexing by name\n   */\n\n\n  Geo.prototype.addGeoCoord = function (name, geoCoord) {\n    this._nameCoordMap.set(name, geoCoord);\n  };\n  /**\n   * Get geoCoord by name\n   */\n\n\n  Geo.prototype.getGeoCoord = function (name) {\n    var region = this._regionsMap.get(name); // Calculate center only on demand.\n\n\n    return this._nameCoordMap.get(name) || region && region.getCenter();\n  };\n\n  Geo.prototype.dataToPoint = function (data, noRoam, out) {\n    if (zrUtil.isString(data)) {\n      // Map area name to geoCoord\n      data = this.getGeoCoord(data);\n    }\n\n    if (data) {\n      var projection = this.projection;\n\n      if (projection) {\n        // projection may return null point.\n        data = projection.project(data);\n      }\n\n      return data && this.projectedToPoint(data, noRoam, out);\n    }\n  };\n\n  Geo.prototype.pointToData = function (point) {\n    var projection = this.projection;\n\n    if (projection) {\n      // projection may return null point.\n      point = projection.unproject(point);\n    }\n\n    return point && this.pointToProjected(point);\n  };\n  /**\n   * Point to projected data. Same with pointToData when projection is used.\n   */\n\n\n  Geo.prototype.pointToProjected = function (point) {\n    return _super.prototype.pointToData.call(this, point);\n  };\n\n  Geo.prototype.projectedToPoint = function (projected, noRoam, out) {\n    return _super.prototype.dataToPoint.call(this, projected, noRoam, out);\n  };\n\n  Geo.prototype.convertToPixel = function (ecModel, finder, value) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? coordSys.dataToPoint(value) : null;\n  };\n\n  Geo.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? coordSys.pointToData(pixel) : null;\n  };\n\n  return Geo;\n}(View);\n\n;\nzrUtil.mixin(Geo, View);\n\nfunction getCoordSys(finder) {\n  var geoModel = finder.geoModel;\n  var seriesModel = finder.seriesModel;\n  return geoModel ? geoModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem // For map series.\n  || (seriesModel.getReferringComponents('geo', SINGLE_REFERRING).models[0] || {}).coordinateSystem : null;\n}\n\nexport default Geo;"]},"metadata":{},"sourceType":"module"}