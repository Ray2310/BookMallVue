{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport * as graphic from '../../util/graphic.js';\nimport AxisBuilder from './AxisBuilder.js';\nimport AxisView from './AxisView.js';\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitLine', 'splitArea', 'minorSplitLine'];\n\nvar RadiusAxisView =\n/** @class */\nfunction (_super) {\n  __extends(RadiusAxisView, _super);\n\n  function RadiusAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = RadiusAxisView.type;\n    _this.axisPointerClass = 'PolarAxisPointer';\n    return _this;\n  }\n\n  RadiusAxisView.prototype.render = function (radiusAxisModel, ecModel) {\n    this.group.removeAll();\n\n    if (!radiusAxisModel.get('show')) {\n      return;\n    }\n\n    var oldAxisGroup = this._axisGroup;\n    var newAxisGroup = this._axisGroup = new graphic.Group();\n    this.group.add(newAxisGroup);\n    var radiusAxis = radiusAxisModel.axis;\n    var polar = radiusAxis.polar;\n    var angleAxis = polar.getAngleAxis();\n    var ticksCoords = radiusAxis.getTicksCoords();\n    var minorTicksCoords = radiusAxis.getMinorTicksCoords();\n    var axisAngle = angleAxis.getExtent()[0];\n    var radiusExtent = radiusAxis.getExtent();\n    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\n    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n    newAxisGroup.add(axisBuilder.getGroup());\n    graphic.groupTransition(oldAxisGroup, newAxisGroup, radiusAxisModel);\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (radiusAxisModel.get([name, 'show']) && !radiusAxis.scale.isBlank()) {\n        axisElementBuilders[name](this.group, radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords, minorTicksCoords);\n      }\n    }, this);\n  };\n\n  RadiusAxisView.type = 'radiusAxis';\n  return RadiusAxisView;\n}(AxisView);\n\nvar axisElementBuilders = {\n  splitLine: function splitLine(group, radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    var splitLineModel = radiusAxisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    var lineCount = 0;\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\n    var splitLines = [];\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % lineColors.length;\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\n      splitLines[colorIndex].push(new graphic.Circle({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          // ensure circle radius >= 0\n          r: Math.max(ticksCoords[i].coord, 0)\n        }\n      }));\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitLines.length; i++) {\n      group.add(graphic.mergePath(splitLines[i], {\n        style: zrUtil.defaults({\n          stroke: lineColors[i % lineColors.length],\n          fill: null\n        }, lineStyleModel.getLineStyle()),\n        silent: true\n      }));\n    }\n  },\n  minorSplitLine: function minorSplitLine(group, radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords, minorTicksCoords) {\n    if (!minorTicksCoords.length) {\n      return;\n    }\n\n    var minorSplitLineModel = radiusAxisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var lines = [];\n\n    for (var i = 0; i < minorTicksCoords.length; i++) {\n      for (var k = 0; k < minorTicksCoords[i].length; k++) {\n        lines.push(new graphic.Circle({\n          shape: {\n            cx: polar.cx,\n            cy: polar.cy,\n            r: minorTicksCoords[i][k].coord\n          }\n        }));\n      }\n    }\n\n    group.add(graphic.mergePath(lines, {\n      style: zrUtil.defaults({\n        fill: null\n      }, lineStyleModel.getLineStyle()),\n      silent: true\n    }));\n  },\n  splitArea: function splitArea(group, radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\n    if (!ticksCoords.length) {\n      return;\n    }\n\n    var splitAreaModel = radiusAxisModel.getModel('splitArea');\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\n    var areaColors = areaStyleModel.get('color');\n    var lineCount = 0;\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\n    var splitAreas = [];\n    var prevRadius = ticksCoords[0].coord;\n\n    for (var i = 1; i < ticksCoords.length; i++) {\n      var colorIndex = lineCount++ % areaColors.length;\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\n      splitAreas[colorIndex].push(new graphic.Sector({\n        shape: {\n          cx: polar.cx,\n          cy: polar.cy,\n          r0: prevRadius,\n          r: ticksCoords[i].coord,\n          startAngle: 0,\n          endAngle: Math.PI * 2\n        },\n        silent: true\n      }));\n      prevRadius = ticksCoords[i].coord;\n    } // Simple optimization\n    // Batching the lines if color are the same\n\n\n    for (var i = 0; i < splitAreas.length; i++) {\n      group.add(graphic.mergePath(splitAreas[i], {\n        style: zrUtil.defaults({\n          fill: areaColors[i % areaColors.length]\n        }, areaStyleModel.getAreaStyle()),\n        silent: true\n      }));\n    }\n  }\n};\n/**\r\n * @inner\r\n */\n\nfunction layoutAxis(polar, radiusAxisModel, axisAngle) {\n  return {\n    position: [polar.cx, polar.cy],\n    rotation: axisAngle / 180 * Math.PI,\n    labelDirection: -1,\n    tickDirection: -1,\n    nameDirection: 1,\n    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),\n    // Over splitLine and splitArea\n    z2: 1\n  };\n}\n\nexport default RadiusAxisView;","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/qingge-Market/qingge-vue/node_modules/echarts/lib/component/axis/RadiusAxisView.js"],"names":["__extends","zrUtil","graphic","AxisBuilder","AxisView","axisBuilderAttrs","selfBuilderAttrs","RadiusAxisView","_super","_this","apply","arguments","type","axisPointerClass","prototype","render","radiusAxisModel","ecModel","group","removeAll","get","oldAxisGroup","_axisGroup","newAxisGroup","Group","add","radiusAxis","axis","polar","angleAxis","getAngleAxis","ticksCoords","getTicksCoords","minorTicksCoords","getMinorTicksCoords","axisAngle","getExtent","radiusExtent","layout","layoutAxis","axisBuilder","each","getGroup","groupTransition","name","scale","isBlank","axisElementBuilders","splitLine","splitLineModel","getModel","lineStyleModel","lineColors","lineCount","Array","splitLines","i","length","colorIndex","push","Circle","shape","cx","cy","r","Math","max","coord","mergePath","style","defaults","stroke","fill","getLineStyle","silent","minorSplitLine","minorSplitLineModel","lines","k","splitArea","splitAreaModel","areaStyleModel","areaColors","splitAreas","prevRadius","Sector","r0","startAngle","endAngle","PI","getAreaStyle","position","rotation","labelDirection","tickDirection","nameDirection","labelRotate","z2"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { __extends } from \"tslib\";\r\nimport * as zrUtil from 'zrender/lib/core/util.js';\r\nimport * as graphic from '../../util/graphic.js';\r\nimport AxisBuilder from './AxisBuilder.js';\r\nimport AxisView from './AxisView.js';\r\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\r\nvar selfBuilderAttrs = ['splitLine', 'splitArea', 'minorSplitLine'];\r\n\r\nvar RadiusAxisView =\r\n/** @class */\r\nfunction (_super) {\r\n  __extends(RadiusAxisView, _super);\r\n\r\n  function RadiusAxisView() {\r\n    var _this = _super !== null && _super.apply(this, arguments) || this;\r\n\r\n    _this.type = RadiusAxisView.type;\r\n    _this.axisPointerClass = 'PolarAxisPointer';\r\n    return _this;\r\n  }\r\n\r\n  RadiusAxisView.prototype.render = function (radiusAxisModel, ecModel) {\r\n    this.group.removeAll();\r\n\r\n    if (!radiusAxisModel.get('show')) {\r\n      return;\r\n    }\r\n\r\n    var oldAxisGroup = this._axisGroup;\r\n    var newAxisGroup = this._axisGroup = new graphic.Group();\r\n    this.group.add(newAxisGroup);\r\n    var radiusAxis = radiusAxisModel.axis;\r\n    var polar = radiusAxis.polar;\r\n    var angleAxis = polar.getAngleAxis();\r\n    var ticksCoords = radiusAxis.getTicksCoords();\r\n    var minorTicksCoords = radiusAxis.getMinorTicksCoords();\r\n    var axisAngle = angleAxis.getExtent()[0];\r\n    var radiusExtent = radiusAxis.getExtent();\r\n    var layout = layoutAxis(polar, radiusAxisModel, axisAngle);\r\n    var axisBuilder = new AxisBuilder(radiusAxisModel, layout);\r\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\r\n    newAxisGroup.add(axisBuilder.getGroup());\r\n    graphic.groupTransition(oldAxisGroup, newAxisGroup, radiusAxisModel);\r\n    zrUtil.each(selfBuilderAttrs, function (name) {\r\n      if (radiusAxisModel.get([name, 'show']) && !radiusAxis.scale.isBlank()) {\r\n        axisElementBuilders[name](this.group, radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords, minorTicksCoords);\r\n      }\r\n    }, this);\r\n  };\r\n\r\n  RadiusAxisView.type = 'radiusAxis';\r\n  return RadiusAxisView;\r\n}(AxisView);\r\n\r\nvar axisElementBuilders = {\r\n  splitLine: function (group, radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\r\n    var splitLineModel = radiusAxisModel.getModel('splitLine');\r\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\r\n    var lineColors = lineStyleModel.get('color');\r\n    var lineCount = 0;\r\n    lineColors = lineColors instanceof Array ? lineColors : [lineColors];\r\n    var splitLines = [];\r\n\r\n    for (var i = 0; i < ticksCoords.length; i++) {\r\n      var colorIndex = lineCount++ % lineColors.length;\r\n      splitLines[colorIndex] = splitLines[colorIndex] || [];\r\n      splitLines[colorIndex].push(new graphic.Circle({\r\n        shape: {\r\n          cx: polar.cx,\r\n          cy: polar.cy,\r\n          // ensure circle radius >= 0\r\n          r: Math.max(ticksCoords[i].coord, 0)\r\n        }\r\n      }));\r\n    } // Simple optimization\r\n    // Batching the lines if color are the same\r\n\r\n\r\n    for (var i = 0; i < splitLines.length; i++) {\r\n      group.add(graphic.mergePath(splitLines[i], {\r\n        style: zrUtil.defaults({\r\n          stroke: lineColors[i % lineColors.length],\r\n          fill: null\r\n        }, lineStyleModel.getLineStyle()),\r\n        silent: true\r\n      }));\r\n    }\r\n  },\r\n  minorSplitLine: function (group, radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords, minorTicksCoords) {\r\n    if (!minorTicksCoords.length) {\r\n      return;\r\n    }\r\n\r\n    var minorSplitLineModel = radiusAxisModel.getModel('minorSplitLine');\r\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\r\n    var lines = [];\r\n\r\n    for (var i = 0; i < minorTicksCoords.length; i++) {\r\n      for (var k = 0; k < minorTicksCoords[i].length; k++) {\r\n        lines.push(new graphic.Circle({\r\n          shape: {\r\n            cx: polar.cx,\r\n            cy: polar.cy,\r\n            r: minorTicksCoords[i][k].coord\r\n          }\r\n        }));\r\n      }\r\n    }\r\n\r\n    group.add(graphic.mergePath(lines, {\r\n      style: zrUtil.defaults({\r\n        fill: null\r\n      }, lineStyleModel.getLineStyle()),\r\n      silent: true\r\n    }));\r\n  },\r\n  splitArea: function (group, radiusAxisModel, polar, axisAngle, radiusExtent, ticksCoords) {\r\n    if (!ticksCoords.length) {\r\n      return;\r\n    }\r\n\r\n    var splitAreaModel = radiusAxisModel.getModel('splitArea');\r\n    var areaStyleModel = splitAreaModel.getModel('areaStyle');\r\n    var areaColors = areaStyleModel.get('color');\r\n    var lineCount = 0;\r\n    areaColors = areaColors instanceof Array ? areaColors : [areaColors];\r\n    var splitAreas = [];\r\n    var prevRadius = ticksCoords[0].coord;\r\n\r\n    for (var i = 1; i < ticksCoords.length; i++) {\r\n      var colorIndex = lineCount++ % areaColors.length;\r\n      splitAreas[colorIndex] = splitAreas[colorIndex] || [];\r\n      splitAreas[colorIndex].push(new graphic.Sector({\r\n        shape: {\r\n          cx: polar.cx,\r\n          cy: polar.cy,\r\n          r0: prevRadius,\r\n          r: ticksCoords[i].coord,\r\n          startAngle: 0,\r\n          endAngle: Math.PI * 2\r\n        },\r\n        silent: true\r\n      }));\r\n      prevRadius = ticksCoords[i].coord;\r\n    } // Simple optimization\r\n    // Batching the lines if color are the same\r\n\r\n\r\n    for (var i = 0; i < splitAreas.length; i++) {\r\n      group.add(graphic.mergePath(splitAreas[i], {\r\n        style: zrUtil.defaults({\r\n          fill: areaColors[i % areaColors.length]\r\n        }, areaStyleModel.getAreaStyle()),\r\n        silent: true\r\n      }));\r\n    }\r\n  }\r\n};\r\n/**\r\n * @inner\r\n */\r\n\r\nfunction layoutAxis(polar, radiusAxisModel, axisAngle) {\r\n  return {\r\n    position: [polar.cx, polar.cy],\r\n    rotation: axisAngle / 180 * Math.PI,\r\n    labelDirection: -1,\r\n    tickDirection: -1,\r\n    nameDirection: 1,\r\n    labelRotate: radiusAxisModel.getModel('axisLabel').get('rotate'),\r\n    // Over splitLine and splitArea\r\n    z2: 1\r\n  };\r\n}\r\n\r\nexport default RadiusAxisView;"]},"metadata":{},"sourceType":"module"}