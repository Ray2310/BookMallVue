{"ast":null,"code":"import \"core-js/modules/es.function.name.js\";\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO clockwise\nimport IndicatorAxis from './IndicatorAxis.js';\nimport IntervalScale from '../../scale/Interval.js';\nimport * as numberUtil from '../../util/number.js';\nimport { map, each, isString, isNumber } from 'zrender/lib/core/util.js';\nimport { alignScaleTicks } from '../axisAlignTicks.js';\n\nvar Radar =\n/** @class */\nfunction () {\n  function Radar(radarModel, ecModel, api) {\n    /**\n     *\n     * Radar dimensions\n     */\n    this.dimensions = [];\n    this._model = radarModel;\n    this._indicatorAxes = map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {\n      var dim = 'indicator_' + idx;\n      var indicatorAxis = new IndicatorAxis(dim, new IntervalScale() // (indicatorModel.get('axisType') === 'log') ? new LogScale() : new IntervalScale()\n      );\n      indicatorAxis.name = indicatorModel.get('name'); // Inject model and axis\n\n      indicatorAxis.model = indicatorModel;\n      indicatorModel.axis = indicatorAxis;\n      this.dimensions.push(dim);\n      return indicatorAxis;\n    }, this);\n    this.resize(radarModel, api);\n  }\n\n  Radar.prototype.getIndicatorAxes = function () {\n    return this._indicatorAxes;\n  };\n\n  Radar.prototype.dataToPoint = function (value, indicatorIndex) {\n    var indicatorAxis = this._indicatorAxes[indicatorIndex];\n    return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);\n  }; // TODO: API should be coordToPoint([coord, indicatorIndex])\n\n\n  Radar.prototype.coordToPoint = function (coord, indicatorIndex) {\n    var indicatorAxis = this._indicatorAxes[indicatorIndex];\n    var angle = indicatorAxis.angle;\n    var x = this.cx + coord * Math.cos(angle);\n    var y = this.cy - coord * Math.sin(angle);\n    return [x, y];\n  };\n\n  Radar.prototype.pointToData = function (pt) {\n    var dx = pt[0] - this.cx;\n    var dy = pt[1] - this.cy;\n    var radius = Math.sqrt(dx * dx + dy * dy);\n    dx /= radius;\n    dy /= radius;\n    var radian = Math.atan2(-dy, dx); // Find the closest angle\n    // FIXME index can calculated directly\n\n    var minRadianDiff = Infinity;\n    var closestAxis;\n    var closestAxisIdx = -1;\n\n    for (var i = 0; i < this._indicatorAxes.length; i++) {\n      var indicatorAxis = this._indicatorAxes[i];\n      var diff = Math.abs(radian - indicatorAxis.angle);\n\n      if (diff < minRadianDiff) {\n        closestAxis = indicatorAxis;\n        closestAxisIdx = i;\n        minRadianDiff = diff;\n      }\n    }\n\n    return [closestAxisIdx, +(closestAxis && closestAxis.coordToData(radius))];\n  };\n\n  Radar.prototype.resize = function (radarModel, api) {\n    var center = radarModel.get('center');\n    var viewWidth = api.getWidth();\n    var viewHeight = api.getHeight();\n    var viewSize = Math.min(viewWidth, viewHeight) / 2;\n    this.cx = numberUtil.parsePercent(center[0], viewWidth);\n    this.cy = numberUtil.parsePercent(center[1], viewHeight);\n    this.startAngle = radarModel.get('startAngle') * Math.PI / 180; // radius may be single value like `20`, `'80%'`, or array like `[10, '80%']`\n\n    var radius = radarModel.get('radius');\n\n    if (isString(radius) || isNumber(radius)) {\n      radius = [0, radius];\n    }\n\n    this.r0 = numberUtil.parsePercent(radius[0], viewSize);\n    this.r = numberUtil.parsePercent(radius[1], viewSize);\n    each(this._indicatorAxes, function (indicatorAxis, idx) {\n      indicatorAxis.setExtent(this.r0, this.r);\n      var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length; // Normalize to [-PI, PI]\n\n      angle = Math.atan2(Math.sin(angle), Math.cos(angle));\n      indicatorAxis.angle = angle;\n    }, this);\n  };\n\n  Radar.prototype.update = function (ecModel, api) {\n    var indicatorAxes = this._indicatorAxes;\n    var radarModel = this._model;\n    each(indicatorAxes, function (indicatorAxis) {\n      indicatorAxis.scale.setExtent(Infinity, -Infinity);\n    });\n    ecModel.eachSeriesByType('radar', function (radarSeries, idx) {\n      if (radarSeries.get('coordinateSystem') !== 'radar' // @ts-ignore\n      || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {\n        return;\n      }\n\n      var data = radarSeries.getData();\n      each(indicatorAxes, function (indicatorAxis) {\n        indicatorAxis.scale.unionExtentFromData(data, data.mapDimension(indicatorAxis.dim));\n      });\n    }, this);\n    var splitNumber = radarModel.get('splitNumber');\n    var dummyScale = new IntervalScale();\n    dummyScale.setExtent(0, splitNumber);\n    dummyScale.setInterval(1); // Force all the axis fixing the maxSplitNumber.\n\n    each(indicatorAxes, function (indicatorAxis, idx) {\n      alignScaleTicks(indicatorAxis.scale, indicatorAxis.model, dummyScale);\n    });\n  };\n\n  Radar.prototype.convertToPixel = function (ecModel, finder, value) {\n    console.warn('Not implemented.');\n    return null;\n  };\n\n  Radar.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    console.warn('Not implemented.');\n    return null;\n  };\n\n  Radar.prototype.containPoint = function (point) {\n    console.warn('Not implemented.');\n    return false;\n  };\n\n  Radar.create = function (ecModel, api) {\n    var radarList = [];\n    ecModel.eachComponent('radar', function (radarModel) {\n      var radar = new Radar(radarModel, ecModel, api);\n      radarList.push(radar);\n      radarModel.coordinateSystem = radar;\n    });\n    ecModel.eachSeriesByType('radar', function (radarSeries) {\n      if (radarSeries.get('coordinateSystem') === 'radar') {\n        // Inject coordinate system\n        // @ts-ignore\n        radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];\n      }\n    });\n    return radarList;\n  };\n  /**\n   * Radar dimensions is based on the data\n   */\n\n\n  Radar.dimensions = [];\n  return Radar;\n}();\n\nexport default Radar;","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/ElectronicMallVue/node_modules/echarts/lib/coord/radar/Radar.js"],"names":["IndicatorAxis","IntervalScale","numberUtil","map","each","isString","isNumber","alignScaleTicks","Radar","radarModel","ecModel","api","dimensions","_model","_indicatorAxes","getIndicatorModels","indicatorModel","idx","dim","indicatorAxis","name","get","model","axis","push","resize","prototype","getIndicatorAxes","dataToPoint","value","indicatorIndex","coordToPoint","dataToCoord","coord","angle","x","cx","Math","cos","y","cy","sin","pointToData","pt","dx","dy","radius","sqrt","radian","atan2","minRadianDiff","Infinity","closestAxis","closestAxisIdx","i","length","diff","abs","coordToData","center","viewWidth","getWidth","viewHeight","getHeight","viewSize","min","parsePercent","startAngle","PI","r0","r","setExtent","update","indicatorAxes","scale","eachSeriesByType","radarSeries","getComponent","data","getData","unionExtentFromData","mapDimension","splitNumber","dummyScale","setInterval","convertToPixel","finder","console","warn","convertFromPixel","pixel","containPoint","point","create","radarList","eachComponent","radar","coordinateSystem"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// TODO clockwise\nimport IndicatorAxis from './IndicatorAxis.js';\nimport IntervalScale from '../../scale/Interval.js';\nimport * as numberUtil from '../../util/number.js';\nimport { map, each, isString, isNumber } from 'zrender/lib/core/util.js';\nimport { alignScaleTicks } from '../axisAlignTicks.js';\n\nvar Radar =\n/** @class */\nfunction () {\n  function Radar(radarModel, ecModel, api) {\n    /**\n     *\n     * Radar dimensions\n     */\n    this.dimensions = [];\n    this._model = radarModel;\n    this._indicatorAxes = map(radarModel.getIndicatorModels(), function (indicatorModel, idx) {\n      var dim = 'indicator_' + idx;\n      var indicatorAxis = new IndicatorAxis(dim, new IntervalScale() // (indicatorModel.get('axisType') === 'log') ? new LogScale() : new IntervalScale()\n      );\n      indicatorAxis.name = indicatorModel.get('name'); // Inject model and axis\n\n      indicatorAxis.model = indicatorModel;\n      indicatorModel.axis = indicatorAxis;\n      this.dimensions.push(dim);\n      return indicatorAxis;\n    }, this);\n    this.resize(radarModel, api);\n  }\n\n  Radar.prototype.getIndicatorAxes = function () {\n    return this._indicatorAxes;\n  };\n\n  Radar.prototype.dataToPoint = function (value, indicatorIndex) {\n    var indicatorAxis = this._indicatorAxes[indicatorIndex];\n    return this.coordToPoint(indicatorAxis.dataToCoord(value), indicatorIndex);\n  }; // TODO: API should be coordToPoint([coord, indicatorIndex])\n\n\n  Radar.prototype.coordToPoint = function (coord, indicatorIndex) {\n    var indicatorAxis = this._indicatorAxes[indicatorIndex];\n    var angle = indicatorAxis.angle;\n    var x = this.cx + coord * Math.cos(angle);\n    var y = this.cy - coord * Math.sin(angle);\n    return [x, y];\n  };\n\n  Radar.prototype.pointToData = function (pt) {\n    var dx = pt[0] - this.cx;\n    var dy = pt[1] - this.cy;\n    var radius = Math.sqrt(dx * dx + dy * dy);\n    dx /= radius;\n    dy /= radius;\n    var radian = Math.atan2(-dy, dx); // Find the closest angle\n    // FIXME index can calculated directly\n\n    var minRadianDiff = Infinity;\n    var closestAxis;\n    var closestAxisIdx = -1;\n\n    for (var i = 0; i < this._indicatorAxes.length; i++) {\n      var indicatorAxis = this._indicatorAxes[i];\n      var diff = Math.abs(radian - indicatorAxis.angle);\n\n      if (diff < minRadianDiff) {\n        closestAxis = indicatorAxis;\n        closestAxisIdx = i;\n        minRadianDiff = diff;\n      }\n    }\n\n    return [closestAxisIdx, +(closestAxis && closestAxis.coordToData(radius))];\n  };\n\n  Radar.prototype.resize = function (radarModel, api) {\n    var center = radarModel.get('center');\n    var viewWidth = api.getWidth();\n    var viewHeight = api.getHeight();\n    var viewSize = Math.min(viewWidth, viewHeight) / 2;\n    this.cx = numberUtil.parsePercent(center[0], viewWidth);\n    this.cy = numberUtil.parsePercent(center[1], viewHeight);\n    this.startAngle = radarModel.get('startAngle') * Math.PI / 180; // radius may be single value like `20`, `'80%'`, or array like `[10, '80%']`\n\n    var radius = radarModel.get('radius');\n\n    if (isString(radius) || isNumber(radius)) {\n      radius = [0, radius];\n    }\n\n    this.r0 = numberUtil.parsePercent(radius[0], viewSize);\n    this.r = numberUtil.parsePercent(radius[1], viewSize);\n    each(this._indicatorAxes, function (indicatorAxis, idx) {\n      indicatorAxis.setExtent(this.r0, this.r);\n      var angle = this.startAngle + idx * Math.PI * 2 / this._indicatorAxes.length; // Normalize to [-PI, PI]\n\n      angle = Math.atan2(Math.sin(angle), Math.cos(angle));\n      indicatorAxis.angle = angle;\n    }, this);\n  };\n\n  Radar.prototype.update = function (ecModel, api) {\n    var indicatorAxes = this._indicatorAxes;\n    var radarModel = this._model;\n    each(indicatorAxes, function (indicatorAxis) {\n      indicatorAxis.scale.setExtent(Infinity, -Infinity);\n    });\n    ecModel.eachSeriesByType('radar', function (radarSeries, idx) {\n      if (radarSeries.get('coordinateSystem') !== 'radar' // @ts-ignore\n      || ecModel.getComponent('radar', radarSeries.get('radarIndex')) !== radarModel) {\n        return;\n      }\n\n      var data = radarSeries.getData();\n      each(indicatorAxes, function (indicatorAxis) {\n        indicatorAxis.scale.unionExtentFromData(data, data.mapDimension(indicatorAxis.dim));\n      });\n    }, this);\n    var splitNumber = radarModel.get('splitNumber');\n    var dummyScale = new IntervalScale();\n    dummyScale.setExtent(0, splitNumber);\n    dummyScale.setInterval(1); // Force all the axis fixing the maxSplitNumber.\n\n    each(indicatorAxes, function (indicatorAxis, idx) {\n      alignScaleTicks(indicatorAxis.scale, indicatorAxis.model, dummyScale);\n    });\n  };\n\n  Radar.prototype.convertToPixel = function (ecModel, finder, value) {\n    console.warn('Not implemented.');\n    return null;\n  };\n\n  Radar.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    console.warn('Not implemented.');\n    return null;\n  };\n\n  Radar.prototype.containPoint = function (point) {\n    console.warn('Not implemented.');\n    return false;\n  };\n\n  Radar.create = function (ecModel, api) {\n    var radarList = [];\n    ecModel.eachComponent('radar', function (radarModel) {\n      var radar = new Radar(radarModel, ecModel, api);\n      radarList.push(radar);\n      radarModel.coordinateSystem = radar;\n    });\n    ecModel.eachSeriesByType('radar', function (radarSeries) {\n      if (radarSeries.get('coordinateSystem') === 'radar') {\n        // Inject coordinate system\n        // @ts-ignore\n        radarSeries.coordinateSystem = radarList[radarSeries.get('radarIndex') || 0];\n      }\n    });\n    return radarList;\n  };\n  /**\n   * Radar dimensions is based on the data\n   */\n\n\n  Radar.dimensions = [];\n  return Radar;\n}();\n\nexport default Radar;"]},"metadata":{},"sourceType":"module"}