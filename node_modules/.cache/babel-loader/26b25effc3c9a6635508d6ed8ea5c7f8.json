{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport { cubicAt, cubicRootAt } from '../core/curve.js';\nimport { trim } from '../core/util.js';\nvar regexp = /cubic-bezier\\(([0-9,\\.e ]+)\\)/;\nexport function createCubicEasingFunc(cubicEasingStr) {\n  var cubic = cubicEasingStr && regexp.exec(cubicEasingStr);\n\n  if (cubic) {\n    var points = cubic[1].split(',');\n    var a_1 = +trim(points[0]);\n    var b_1 = +trim(points[1]);\n    var c_1 = +trim(points[2]);\n    var d_1 = +trim(points[3]);\n\n    if (isNaN(a_1 + b_1 + c_1 + d_1)) {\n      return;\n    }\n\n    var roots_1 = [];\n    return function (p) {\n      return p <= 0 ? 0 : p >= 1 ? 1 : cubicRootAt(0, a_1, c_1, 1, p, roots_1) && cubicAt(0, b_1, d_1, 1, roots_1[0]);\n    };\n  }\n}","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/ElectronicMallVue/node_modules/zrender/lib/animation/cubicEasing.js"],"names":["cubicAt","cubicRootAt","trim","regexp","createCubicEasingFunc","cubicEasingStr","cubic","exec","points","split","a_1","b_1","c_1","d_1","isNaN","roots_1","p"],"mappings":";;AAAA,SAASA,OAAT,EAAkBC,WAAlB,QAAqC,kBAArC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,IAAIC,MAAM,GAAG,+BAAb;AACA,OAAO,SAASC,qBAAT,CAA+BC,cAA/B,EAA+C;AAClD,MAAIC,KAAK,GAAGD,cAAc,IAAIF,MAAM,CAACI,IAAP,CAAYF,cAAZ,CAA9B;;AACA,MAAIC,KAAJ,EAAW;AACP,QAAIE,MAAM,GAAGF,KAAK,CAAC,CAAD,CAAL,CAASG,KAAT,CAAe,GAAf,CAAb;AACA,QAAIC,GAAG,GAAG,CAACR,IAAI,CAACM,MAAM,CAAC,CAAD,CAAP,CAAf;AACA,QAAIG,GAAG,GAAG,CAACT,IAAI,CAACM,MAAM,CAAC,CAAD,CAAP,CAAf;AACA,QAAII,GAAG,GAAG,CAACV,IAAI,CAACM,MAAM,CAAC,CAAD,CAAP,CAAf;AACA,QAAIK,GAAG,GAAG,CAACX,IAAI,CAACM,MAAM,CAAC,CAAD,CAAP,CAAf;;AACA,QAAIM,KAAK,CAACJ,GAAG,GAAGC,GAAN,GAAYC,GAAZ,GAAkBC,GAAnB,CAAT,EAAkC;AAC9B;AACH;;AACD,QAAIE,OAAO,GAAG,EAAd;AACA,WAAO,UAAUC,CAAV,EAAa;AAChB,aAAOA,CAAC,IAAI,CAAL,GACD,CADC,GACGA,CAAC,IAAI,CAAL,GACJ,CADI,GAEJf,WAAW,CAAC,CAAD,EAAIS,GAAJ,EAASE,GAAT,EAAc,CAAd,EAAiBI,CAAjB,EAAoBD,OAApB,CAAX,IAA2Cf,OAAO,CAAC,CAAD,EAAIW,GAAJ,EAASE,GAAT,EAAc,CAAd,EAAiBE,OAAO,CAAC,CAAD,CAAxB,CAHxD;AAIH,KALD;AAMH;AACJ","sourcesContent":["import { cubicAt, cubicRootAt } from '../core/curve.js';\nimport { trim } from '../core/util.js';\nvar regexp = /cubic-bezier\\(([0-9,\\.e ]+)\\)/;\nexport function createCubicEasingFunc(cubicEasingStr) {\n    var cubic = cubicEasingStr && regexp.exec(cubicEasingStr);\n    if (cubic) {\n        var points = cubic[1].split(',');\n        var a_1 = +trim(points[0]);\n        var b_1 = +trim(points[1]);\n        var c_1 = +trim(points[2]);\n        var d_1 = +trim(points[3]);\n        if (isNaN(a_1 + b_1 + c_1 + d_1)) {\n            return;\n        }\n        var roots_1 = [];\n        return function (p) {\n            return p <= 0\n                ? 0 : p >= 1\n                ? 1\n                : cubicRootAt(0, a_1, c_1, 1, p, roots_1) && cubicAt(0, b_1, d_1, 1, roots_1[0]);\n        };\n    }\n}\n"]},"metadata":{},"sourceType":"module"}