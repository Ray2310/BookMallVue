{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { __extends } from \"tslib\";\nimport { addEventListener, removeEventListener, normalizeEvent, getNativeEvent } from '../core/event.js';\nimport * as zrUtil from '../core/util.js';\nimport Eventful from '../core/Eventful.js';\nimport env from '../core/env.js';\nvar TOUCH_CLICK_DELAY = 300;\nvar globalEventSupported = env.domSupported;\n\nvar localNativeListenerNames = function () {\n  var mouseHandlerNames = ['click', 'dblclick', 'mousewheel', 'wheel', 'mouseout', 'mouseup', 'mousedown', 'mousemove', 'contextmenu'];\n  var touchHandlerNames = ['touchstart', 'touchend', 'touchmove'];\n  var pointerEventNameMap = {\n    pointerdown: 1,\n    pointerup: 1,\n    pointermove: 1,\n    pointerout: 1\n  };\n  var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n    var nm = name.replace('mouse', 'pointer');\n    return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;\n  });\n  return {\n    mouse: mouseHandlerNames,\n    touch: touchHandlerNames,\n    pointer: pointerHandlerNames\n  };\n}();\n\nvar globalNativeListenerNames = {\n  mouse: ['mousemove', 'mouseup'],\n  pointer: ['pointermove', 'pointerup']\n};\nvar wheelEventSupported = false;\n\nfunction isPointerFromTouch(event) {\n  var pointerType = event.pointerType;\n  return pointerType === 'pen' || pointerType === 'touch';\n}\n\nfunction setTouchTimer(scope) {\n  scope.touching = true;\n\n  if (scope.touchTimer != null) {\n    clearTimeout(scope.touchTimer);\n    scope.touchTimer = null;\n  }\n\n  scope.touchTimer = setTimeout(function () {\n    scope.touching = false;\n    scope.touchTimer = null;\n  }, 700);\n}\n\nfunction markTouch(event) {\n  event && (event.zrByTouch = true);\n}\n\nfunction normalizeGlobalEvent(instance, event) {\n  return normalizeEvent(instance.dom, new FakeGlobalEvent(instance, event), true);\n}\n\nfunction isLocalEl(instance, el) {\n  var elTmp = el;\n  var isLocal = false;\n\n  while (elTmp && elTmp.nodeType !== 9 && !(isLocal = elTmp.domBelongToZr || elTmp !== el && elTmp === instance.painterRoot)) {\n    elTmp = elTmp.parentNode;\n  }\n\n  return isLocal;\n}\n\nvar FakeGlobalEvent = function () {\n  function FakeGlobalEvent(instance, event) {\n    this.stopPropagation = zrUtil.noop;\n    this.stopImmediatePropagation = zrUtil.noop;\n    this.preventDefault = zrUtil.noop;\n    this.type = event.type;\n    this.target = this.currentTarget = instance.dom;\n    this.pointerType = event.pointerType;\n    this.clientX = event.clientX;\n    this.clientY = event.clientY;\n  }\n\n  return FakeGlobalEvent;\n}();\n\nvar localDOMHandlers = {\n  mousedown: function mousedown(event) {\n    event = normalizeEvent(this.dom, event);\n    this.__mayPointerCapture = [event.zrX, event.zrY];\n    this.trigger('mousedown', event);\n  },\n  mousemove: function mousemove(event) {\n    event = normalizeEvent(this.dom, event);\n    var downPoint = this.__mayPointerCapture;\n\n    if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {\n      this.__togglePointerCapture(true);\n    }\n\n    this.trigger('mousemove', event);\n  },\n  mouseup: function mouseup(event) {\n    event = normalizeEvent(this.dom, event);\n\n    this.__togglePointerCapture(false);\n\n    this.trigger('mouseup', event);\n  },\n  mouseout: function mouseout(event) {\n    event = normalizeEvent(this.dom, event);\n    var element = event.toElement || event.relatedTarget;\n\n    if (!isLocalEl(this, element)) {\n      if (this.__pointerCapturing) {\n        event.zrEventControl = 'no_globalout';\n      }\n\n      this.trigger('mouseout', event);\n    }\n  },\n  wheel: function wheel(event) {\n    wheelEventSupported = true;\n    event = normalizeEvent(this.dom, event);\n    this.trigger('mousewheel', event);\n  },\n  mousewheel: function mousewheel(event) {\n    if (wheelEventSupported) {\n      return;\n    }\n\n    event = normalizeEvent(this.dom, event);\n    this.trigger('mousewheel', event);\n  },\n  touchstart: function touchstart(event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.__lastTouchMoment = new Date();\n    this.handler.processGesture(event, 'start');\n    localDOMHandlers.mousemove.call(this, event);\n    localDOMHandlers.mousedown.call(this, event);\n  },\n  touchmove: function touchmove(event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'change');\n    localDOMHandlers.mousemove.call(this, event);\n  },\n  touchend: function touchend(event) {\n    event = normalizeEvent(this.dom, event);\n    markTouch(event);\n    this.handler.processGesture(event, 'end');\n    localDOMHandlers.mouseup.call(this, event);\n\n    if (+new Date() - +this.__lastTouchMoment < TOUCH_CLICK_DELAY) {\n      localDOMHandlers.click.call(this, event);\n    }\n  },\n  pointerdown: function pointerdown(event) {\n    localDOMHandlers.mousedown.call(this, event);\n  },\n  pointermove: function pointermove(event) {\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function pointerup(event) {\n    localDOMHandlers.mouseup.call(this, event);\n  },\n  pointerout: function pointerout(event) {\n    if (!isPointerFromTouch(event)) {\n      localDOMHandlers.mouseout.call(this, event);\n    }\n  }\n};\nzrUtil.each(['click', 'dblclick', 'contextmenu'], function (name) {\n  localDOMHandlers[name] = function (event) {\n    event = normalizeEvent(this.dom, event);\n    this.trigger(name, event);\n  };\n});\nvar globalDOMHandlers = {\n  pointermove: function pointermove(event) {\n    if (!isPointerFromTouch(event)) {\n      globalDOMHandlers.mousemove.call(this, event);\n    }\n  },\n  pointerup: function pointerup(event) {\n    globalDOMHandlers.mouseup.call(this, event);\n  },\n  mousemove: function mousemove(event) {\n    this.trigger('mousemove', event);\n  },\n  mouseup: function mouseup(event) {\n    var pointerCaptureReleasing = this.__pointerCapturing;\n\n    this.__togglePointerCapture(false);\n\n    this.trigger('mouseup', event);\n\n    if (pointerCaptureReleasing) {\n      event.zrEventControl = 'only_globalout';\n      this.trigger('mouseout', event);\n    }\n  }\n};\n\nfunction mountLocalDOMEventListeners(instance, scope) {\n  var domHandlers = scope.domHandlers;\n\n  if (env.pointerEventsSupported) {\n    zrUtil.each(localNativeListenerNames.pointer, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        domHandlers[nativeEventName].call(instance, event);\n      });\n    });\n  } else {\n    if (env.touchEventsSupported) {\n      zrUtil.each(localNativeListenerNames.touch, function (nativeEventName) {\n        mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n          domHandlers[nativeEventName].call(instance, event);\n          setTouchTimer(scope);\n        });\n      });\n    }\n\n    zrUtil.each(localNativeListenerNames.mouse, function (nativeEventName) {\n      mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n        event = getNativeEvent(event);\n\n        if (!scope.touching) {\n          domHandlers[nativeEventName].call(instance, event);\n        }\n      });\n    });\n  }\n}\n\nfunction mountGlobalDOMEventListeners(instance, scope) {\n  if (env.pointerEventsSupported) {\n    zrUtil.each(globalNativeListenerNames.pointer, mount);\n  } else if (!env.touchEventsSupported) {\n    zrUtil.each(globalNativeListenerNames.mouse, mount);\n  }\n\n  function mount(nativeEventName) {\n    function nativeEventListener(event) {\n      event = getNativeEvent(event);\n\n      if (!isLocalEl(instance, event.target)) {\n        event = normalizeGlobalEvent(instance, event);\n        scope.domHandlers[nativeEventName].call(instance, event);\n      }\n    }\n\n    mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, {\n      capture: true\n    });\n  }\n}\n\nfunction mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {\n  scope.mounted[nativeEventName] = listener;\n  scope.listenerOpts[nativeEventName] = opt;\n  addEventListener(scope.domTarget, nativeEventName, listener, opt);\n}\n\nfunction unmountDOMEventListeners(scope) {\n  var mounted = scope.mounted;\n\n  for (var nativeEventName in mounted) {\n    if (mounted.hasOwnProperty(nativeEventName)) {\n      removeEventListener(scope.domTarget, nativeEventName, mounted[nativeEventName], scope.listenerOpts[nativeEventName]);\n    }\n  }\n\n  scope.mounted = {};\n}\n\nvar DOMHandlerScope = function () {\n  function DOMHandlerScope(domTarget, domHandlers) {\n    this.mounted = {};\n    this.listenerOpts = {};\n    this.touching = false;\n    this.domTarget = domTarget;\n    this.domHandlers = domHandlers;\n  }\n\n  return DOMHandlerScope;\n}();\n\nvar HandlerDomProxy = function (_super) {\n  __extends(HandlerDomProxy, _super);\n\n  function HandlerDomProxy(dom, painterRoot) {\n    var _this = _super.call(this) || this;\n\n    _this.__pointerCapturing = false;\n    _this.dom = dom;\n    _this.painterRoot = painterRoot;\n    _this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);\n\n    if (globalEventSupported) {\n      _this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);\n    }\n\n    mountLocalDOMEventListeners(_this, _this._localHandlerScope);\n    return _this;\n  }\n\n  HandlerDomProxy.prototype.dispose = function () {\n    unmountDOMEventListeners(this._localHandlerScope);\n\n    if (globalEventSupported) {\n      unmountDOMEventListeners(this._globalHandlerScope);\n    }\n  };\n\n  HandlerDomProxy.prototype.setCursor = function (cursorStyle) {\n    this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n  };\n\n  HandlerDomProxy.prototype.__togglePointerCapture = function (isPointerCapturing) {\n    this.__mayPointerCapture = null;\n\n    if (globalEventSupported && +this.__pointerCapturing ^ +isPointerCapturing) {\n      this.__pointerCapturing = isPointerCapturing;\n      var globalHandlerScope = this._globalHandlerScope;\n      isPointerCapturing ? mountGlobalDOMEventListeners(this, globalHandlerScope) : unmountDOMEventListeners(globalHandlerScope);\n    }\n  };\n\n  return HandlerDomProxy;\n}(Eventful);\n\nexport default HandlerDomProxy;","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/qingge-Market/qingge-vue/node_modules/zrender/lib/dom/HandlerProxy.js"],"names":["__extends","addEventListener","removeEventListener","normalizeEvent","getNativeEvent","zrUtil","Eventful","env","TOUCH_CLICK_DELAY","globalEventSupported","domSupported","localNativeListenerNames","mouseHandlerNames","touchHandlerNames","pointerEventNameMap","pointerdown","pointerup","pointermove","pointerout","pointerHandlerNames","map","name","nm","replace","hasOwnProperty","mouse","touch","pointer","globalNativeListenerNames","wheelEventSupported","isPointerFromTouch","event","pointerType","setTouchTimer","scope","touching","touchTimer","clearTimeout","setTimeout","markTouch","zrByTouch","normalizeGlobalEvent","instance","dom","FakeGlobalEvent","isLocalEl","el","elTmp","isLocal","nodeType","domBelongToZr","painterRoot","parentNode","stopPropagation","noop","stopImmediatePropagation","preventDefault","type","target","currentTarget","clientX","clientY","localDOMHandlers","mousedown","__mayPointerCapture","zrX","zrY","trigger","mousemove","downPoint","__togglePointerCapture","mouseup","mouseout","element","toElement","relatedTarget","__pointerCapturing","zrEventControl","wheel","mousewheel","touchstart","__lastTouchMoment","Date","handler","processGesture","call","touchmove","touchend","click","each","globalDOMHandlers","pointerCaptureReleasing","mountLocalDOMEventListeners","domHandlers","pointerEventsSupported","nativeEventName","mountSingleDOMEventListener","touchEventsSupported","mountGlobalDOMEventListeners","mount","nativeEventListener","capture","listener","opt","mounted","listenerOpts","domTarget","unmountDOMEventListeners","DOMHandlerScope","HandlerDomProxy","_super","_this","_localHandlerScope","_globalHandlerScope","document","prototype","dispose","setCursor","cursorStyle","style","cursor","isPointerCapturing","globalHandlerScope"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\r\nimport { addEventListener, removeEventListener, normalizeEvent, getNativeEvent } from '../core/event.js';\r\nimport * as zrUtil from '../core/util.js';\r\nimport Eventful from '../core/Eventful.js';\r\nimport env from '../core/env.js';\r\nvar TOUCH_CLICK_DELAY = 300;\r\nvar globalEventSupported = env.domSupported;\r\nvar localNativeListenerNames = (function () {\r\n    var mouseHandlerNames = [\r\n        'click', 'dblclick', 'mousewheel', 'wheel', 'mouseout',\r\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\r\n    ];\r\n    var touchHandlerNames = [\r\n        'touchstart', 'touchend', 'touchmove'\r\n    ];\r\n    var pointerEventNameMap = {\r\n        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\r\n    };\r\n    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\r\n        var nm = name.replace('mouse', 'pointer');\r\n        return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;\r\n    });\r\n    return {\r\n        mouse: mouseHandlerNames,\r\n        touch: touchHandlerNames,\r\n        pointer: pointerHandlerNames\r\n    };\r\n})();\r\nvar globalNativeListenerNames = {\r\n    mouse: ['mousemove', 'mouseup'],\r\n    pointer: ['pointermove', 'pointerup']\r\n};\r\nvar wheelEventSupported = false;\r\nfunction isPointerFromTouch(event) {\r\n    var pointerType = event.pointerType;\r\n    return pointerType === 'pen' || pointerType === 'touch';\r\n}\r\nfunction setTouchTimer(scope) {\r\n    scope.touching = true;\r\n    if (scope.touchTimer != null) {\r\n        clearTimeout(scope.touchTimer);\r\n        scope.touchTimer = null;\r\n    }\r\n    scope.touchTimer = setTimeout(function () {\r\n        scope.touching = false;\r\n        scope.touchTimer = null;\r\n    }, 700);\r\n}\r\nfunction markTouch(event) {\r\n    event && (event.zrByTouch = true);\r\n}\r\nfunction normalizeGlobalEvent(instance, event) {\r\n    return normalizeEvent(instance.dom, new FakeGlobalEvent(instance, event), true);\r\n}\r\nfunction isLocalEl(instance, el) {\r\n    var elTmp = el;\r\n    var isLocal = false;\r\n    while (elTmp && elTmp.nodeType !== 9\r\n        && !(isLocal = elTmp.domBelongToZr\r\n            || (elTmp !== el && elTmp === instance.painterRoot))) {\r\n        elTmp = elTmp.parentNode;\r\n    }\r\n    return isLocal;\r\n}\r\nvar FakeGlobalEvent = (function () {\r\n    function FakeGlobalEvent(instance, event) {\r\n        this.stopPropagation = zrUtil.noop;\r\n        this.stopImmediatePropagation = zrUtil.noop;\r\n        this.preventDefault = zrUtil.noop;\r\n        this.type = event.type;\r\n        this.target = this.currentTarget = instance.dom;\r\n        this.pointerType = event.pointerType;\r\n        this.clientX = event.clientX;\r\n        this.clientY = event.clientY;\r\n    }\r\n    return FakeGlobalEvent;\r\n}());\r\nvar localDOMHandlers = {\r\n    mousedown: function (event) {\r\n        event = normalizeEvent(this.dom, event);\r\n        this.__mayPointerCapture = [event.zrX, event.zrY];\r\n        this.trigger('mousedown', event);\r\n    },\r\n    mousemove: function (event) {\r\n        event = normalizeEvent(this.dom, event);\r\n        var downPoint = this.__mayPointerCapture;\r\n        if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {\r\n            this.__togglePointerCapture(true);\r\n        }\r\n        this.trigger('mousemove', event);\r\n    },\r\n    mouseup: function (event) {\r\n        event = normalizeEvent(this.dom, event);\r\n        this.__togglePointerCapture(false);\r\n        this.trigger('mouseup', event);\r\n    },\r\n    mouseout: function (event) {\r\n        event = normalizeEvent(this.dom, event);\r\n        var element = event.toElement || event.relatedTarget;\r\n        if (!isLocalEl(this, element)) {\r\n            if (this.__pointerCapturing) {\r\n                event.zrEventControl = 'no_globalout';\r\n            }\r\n            this.trigger('mouseout', event);\r\n        }\r\n    },\r\n    wheel: function (event) {\r\n        wheelEventSupported = true;\r\n        event = normalizeEvent(this.dom, event);\r\n        this.trigger('mousewheel', event);\r\n    },\r\n    mousewheel: function (event) {\r\n        if (wheelEventSupported) {\r\n            return;\r\n        }\r\n        event = normalizeEvent(this.dom, event);\r\n        this.trigger('mousewheel', event);\r\n    },\r\n    touchstart: function (event) {\r\n        event = normalizeEvent(this.dom, event);\r\n        markTouch(event);\r\n        this.__lastTouchMoment = new Date();\r\n        this.handler.processGesture(event, 'start');\r\n        localDOMHandlers.mousemove.call(this, event);\r\n        localDOMHandlers.mousedown.call(this, event);\r\n    },\r\n    touchmove: function (event) {\r\n        event = normalizeEvent(this.dom, event);\r\n        markTouch(event);\r\n        this.handler.processGesture(event, 'change');\r\n        localDOMHandlers.mousemove.call(this, event);\r\n    },\r\n    touchend: function (event) {\r\n        event = normalizeEvent(this.dom, event);\r\n        markTouch(event);\r\n        this.handler.processGesture(event, 'end');\r\n        localDOMHandlers.mouseup.call(this, event);\r\n        if (+new Date() - (+this.__lastTouchMoment) < TOUCH_CLICK_DELAY) {\r\n            localDOMHandlers.click.call(this, event);\r\n        }\r\n    },\r\n    pointerdown: function (event) {\r\n        localDOMHandlers.mousedown.call(this, event);\r\n    },\r\n    pointermove: function (event) {\r\n        if (!isPointerFromTouch(event)) {\r\n            localDOMHandlers.mousemove.call(this, event);\r\n        }\r\n    },\r\n    pointerup: function (event) {\r\n        localDOMHandlers.mouseup.call(this, event);\r\n    },\r\n    pointerout: function (event) {\r\n        if (!isPointerFromTouch(event)) {\r\n            localDOMHandlers.mouseout.call(this, event);\r\n        }\r\n    }\r\n};\r\nzrUtil.each(['click', 'dblclick', 'contextmenu'], function (name) {\r\n    localDOMHandlers[name] = function (event) {\r\n        event = normalizeEvent(this.dom, event);\r\n        this.trigger(name, event);\r\n    };\r\n});\r\nvar globalDOMHandlers = {\r\n    pointermove: function (event) {\r\n        if (!isPointerFromTouch(event)) {\r\n            globalDOMHandlers.mousemove.call(this, event);\r\n        }\r\n    },\r\n    pointerup: function (event) {\r\n        globalDOMHandlers.mouseup.call(this, event);\r\n    },\r\n    mousemove: function (event) {\r\n        this.trigger('mousemove', event);\r\n    },\r\n    mouseup: function (event) {\r\n        var pointerCaptureReleasing = this.__pointerCapturing;\r\n        this.__togglePointerCapture(false);\r\n        this.trigger('mouseup', event);\r\n        if (pointerCaptureReleasing) {\r\n            event.zrEventControl = 'only_globalout';\r\n            this.trigger('mouseout', event);\r\n        }\r\n    }\r\n};\r\nfunction mountLocalDOMEventListeners(instance, scope) {\r\n    var domHandlers = scope.domHandlers;\r\n    if (env.pointerEventsSupported) {\r\n        zrUtil.each(localNativeListenerNames.pointer, function (nativeEventName) {\r\n            mountSingleDOMEventListener(scope, nativeEventName, function (event) {\r\n                domHandlers[nativeEventName].call(instance, event);\r\n            });\r\n        });\r\n    }\r\n    else {\r\n        if (env.touchEventsSupported) {\r\n            zrUtil.each(localNativeListenerNames.touch, function (nativeEventName) {\r\n                mountSingleDOMEventListener(scope, nativeEventName, function (event) {\r\n                    domHandlers[nativeEventName].call(instance, event);\r\n                    setTouchTimer(scope);\r\n                });\r\n            });\r\n        }\r\n        zrUtil.each(localNativeListenerNames.mouse, function (nativeEventName) {\r\n            mountSingleDOMEventListener(scope, nativeEventName, function (event) {\r\n                event = getNativeEvent(event);\r\n                if (!scope.touching) {\r\n                    domHandlers[nativeEventName].call(instance, event);\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\nfunction mountGlobalDOMEventListeners(instance, scope) {\r\n    if (env.pointerEventsSupported) {\r\n        zrUtil.each(globalNativeListenerNames.pointer, mount);\r\n    }\r\n    else if (!env.touchEventsSupported) {\r\n        zrUtil.each(globalNativeListenerNames.mouse, mount);\r\n    }\r\n    function mount(nativeEventName) {\r\n        function nativeEventListener(event) {\r\n            event = getNativeEvent(event);\r\n            if (!isLocalEl(instance, event.target)) {\r\n                event = normalizeGlobalEvent(instance, event);\r\n                scope.domHandlers[nativeEventName].call(instance, event);\r\n            }\r\n        }\r\n        mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, { capture: true });\r\n    }\r\n}\r\nfunction mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {\r\n    scope.mounted[nativeEventName] = listener;\r\n    scope.listenerOpts[nativeEventName] = opt;\r\n    addEventListener(scope.domTarget, nativeEventName, listener, opt);\r\n}\r\nfunction unmountDOMEventListeners(scope) {\r\n    var mounted = scope.mounted;\r\n    for (var nativeEventName in mounted) {\r\n        if (mounted.hasOwnProperty(nativeEventName)) {\r\n            removeEventListener(scope.domTarget, nativeEventName, mounted[nativeEventName], scope.listenerOpts[nativeEventName]);\r\n        }\r\n    }\r\n    scope.mounted = {};\r\n}\r\nvar DOMHandlerScope = (function () {\r\n    function DOMHandlerScope(domTarget, domHandlers) {\r\n        this.mounted = {};\r\n        this.listenerOpts = {};\r\n        this.touching = false;\r\n        this.domTarget = domTarget;\r\n        this.domHandlers = domHandlers;\r\n    }\r\n    return DOMHandlerScope;\r\n}());\r\nvar HandlerDomProxy = (function (_super) {\r\n    __extends(HandlerDomProxy, _super);\r\n    function HandlerDomProxy(dom, painterRoot) {\r\n        var _this = _super.call(this) || this;\r\n        _this.__pointerCapturing = false;\r\n        _this.dom = dom;\r\n        _this.painterRoot = painterRoot;\r\n        _this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);\r\n        if (globalEventSupported) {\r\n            _this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);\r\n        }\r\n        mountLocalDOMEventListeners(_this, _this._localHandlerScope);\r\n        return _this;\r\n    }\r\n    HandlerDomProxy.prototype.dispose = function () {\r\n        unmountDOMEventListeners(this._localHandlerScope);\r\n        if (globalEventSupported) {\r\n            unmountDOMEventListeners(this._globalHandlerScope);\r\n        }\r\n    };\r\n    HandlerDomProxy.prototype.setCursor = function (cursorStyle) {\r\n        this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\r\n    };\r\n    HandlerDomProxy.prototype.__togglePointerCapture = function (isPointerCapturing) {\r\n        this.__mayPointerCapture = null;\r\n        if (globalEventSupported\r\n            && ((+this.__pointerCapturing) ^ (+isPointerCapturing))) {\r\n            this.__pointerCapturing = isPointerCapturing;\r\n            var globalHandlerScope = this._globalHandlerScope;\r\n            isPointerCapturing\r\n                ? mountGlobalDOMEventListeners(this, globalHandlerScope)\r\n                : unmountDOMEventListeners(globalHandlerScope);\r\n        }\r\n    };\r\n    return HandlerDomProxy;\r\n}(Eventful));\r\nexport default HandlerDomProxy;\r\n"]},"metadata":{},"sourceType":"module"}