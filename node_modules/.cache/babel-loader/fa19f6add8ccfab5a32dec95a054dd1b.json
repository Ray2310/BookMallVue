{"ast":null,"code":"/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { makeInner, normalizeToArray } from '../../util/model.js';\nvar innerColor = makeInner();\nvar innerDecal = makeInner();\n\nvar PaletteMixin =\n/** @class */\nfunction () {\n  function PaletteMixin() {}\n\n  PaletteMixin.prototype.getColorFromPalette = function (name, scope, requestNum) {\n    var defaultPalette = normalizeToArray(this.get('color', true));\n    var layeredPalette = this.get('colorLayer', true);\n    return getFromPalette(this, innerColor, defaultPalette, layeredPalette, name, scope, requestNum);\n  };\n\n  PaletteMixin.prototype.clearColorPalette = function () {\n    clearPalette(this, innerColor);\n  };\n\n  return PaletteMixin;\n}();\n\nexport function getDecalFromPalette(ecModel, name, scope, requestNum) {\n  var defaultDecals = normalizeToArray(ecModel.get(['aria', 'decal', 'decals']));\n  return getFromPalette(ecModel, innerDecal, defaultDecals, null, name, scope, requestNum);\n}\n\nfunction getNearestPalette(palettes, requestColorNum) {\n  var paletteNum = palettes.length; // TODO palettes must be in order\n\n  for (var i = 0; i < paletteNum; i++) {\n    if (palettes[i].length > requestColorNum) {\n      return palettes[i];\n    }\n  }\n\n  return palettes[paletteNum - 1];\n}\n/**\r\n * @param name MUST NOT be null/undefined. Otherwise call this function\r\n *             twise with the same parameters will get different result.\r\n * @param scope default this.\r\n * @return Can be null/undefined\r\n */\n\n\nfunction getFromPalette(that, inner, defaultPalette, layeredPalette, name, scope, requestNum) {\n  scope = scope || that;\n  var scopeFields = inner(scope);\n  var paletteIdx = scopeFields.paletteIdx || 0;\n  var paletteNameMap = scopeFields.paletteNameMap = scopeFields.paletteNameMap || {}; // Use `hasOwnProperty` to avoid conflict with Object.prototype.\n\n  if (paletteNameMap.hasOwnProperty(name)) {\n    return paletteNameMap[name];\n  }\n\n  var palette = requestNum == null || !layeredPalette ? defaultPalette : getNearestPalette(layeredPalette, requestNum); // In case can't find in layered color palette.\n\n  palette = palette || defaultPalette;\n\n  if (!palette || !palette.length) {\n    return;\n  }\n\n  var pickedPaletteItem = palette[paletteIdx];\n\n  if (name) {\n    paletteNameMap[name] = pickedPaletteItem;\n  }\n\n  scopeFields.paletteIdx = (paletteIdx + 1) % palette.length;\n  return pickedPaletteItem;\n}\n\nfunction clearPalette(that, inner) {\n  inner(that).paletteIdx = 0;\n  inner(that).paletteNameMap = {};\n}\n\nexport { PaletteMixin };","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/qingge-Market/qingge-vue/node_modules/echarts/lib/model/mixin/palette.js"],"names":["makeInner","normalizeToArray","innerColor","innerDecal","PaletteMixin","prototype","getColorFromPalette","name","scope","requestNum","defaultPalette","get","layeredPalette","getFromPalette","clearColorPalette","clearPalette","getDecalFromPalette","ecModel","defaultDecals","getNearestPalette","palettes","requestColorNum","paletteNum","length","i","that","inner","scopeFields","paletteIdx","paletteNameMap","hasOwnProperty","palette","pickedPaletteItem"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { makeInner, normalizeToArray } from '../../util/model.js';\r\nvar innerColor = makeInner();\r\nvar innerDecal = makeInner();\r\n\r\nvar PaletteMixin =\r\n/** @class */\r\nfunction () {\r\n  function PaletteMixin() {}\r\n\r\n  PaletteMixin.prototype.getColorFromPalette = function (name, scope, requestNum) {\r\n    var defaultPalette = normalizeToArray(this.get('color', true));\r\n    var layeredPalette = this.get('colorLayer', true);\r\n    return getFromPalette(this, innerColor, defaultPalette, layeredPalette, name, scope, requestNum);\r\n  };\r\n\r\n  PaletteMixin.prototype.clearColorPalette = function () {\r\n    clearPalette(this, innerColor);\r\n  };\r\n\r\n  return PaletteMixin;\r\n}();\r\n\r\nexport function getDecalFromPalette(ecModel, name, scope, requestNum) {\r\n  var defaultDecals = normalizeToArray(ecModel.get(['aria', 'decal', 'decals']));\r\n  return getFromPalette(ecModel, innerDecal, defaultDecals, null, name, scope, requestNum);\r\n}\r\n\r\nfunction getNearestPalette(palettes, requestColorNum) {\r\n  var paletteNum = palettes.length; // TODO palettes must be in order\r\n\r\n  for (var i = 0; i < paletteNum; i++) {\r\n    if (palettes[i].length > requestColorNum) {\r\n      return palettes[i];\r\n    }\r\n  }\r\n\r\n  return palettes[paletteNum - 1];\r\n}\r\n/**\r\n * @param name MUST NOT be null/undefined. Otherwise call this function\r\n *             twise with the same parameters will get different result.\r\n * @param scope default this.\r\n * @return Can be null/undefined\r\n */\r\n\r\n\r\nfunction getFromPalette(that, inner, defaultPalette, layeredPalette, name, scope, requestNum) {\r\n  scope = scope || that;\r\n  var scopeFields = inner(scope);\r\n  var paletteIdx = scopeFields.paletteIdx || 0;\r\n  var paletteNameMap = scopeFields.paletteNameMap = scopeFields.paletteNameMap || {}; // Use `hasOwnProperty` to avoid conflict with Object.prototype.\r\n\r\n  if (paletteNameMap.hasOwnProperty(name)) {\r\n    return paletteNameMap[name];\r\n  }\r\n\r\n  var palette = requestNum == null || !layeredPalette ? defaultPalette : getNearestPalette(layeredPalette, requestNum); // In case can't find in layered color palette.\r\n\r\n  palette = palette || defaultPalette;\r\n\r\n  if (!palette || !palette.length) {\r\n    return;\r\n  }\r\n\r\n  var pickedPaletteItem = palette[paletteIdx];\r\n\r\n  if (name) {\r\n    paletteNameMap[name] = pickedPaletteItem;\r\n  }\r\n\r\n  scopeFields.paletteIdx = (paletteIdx + 1) % palette.length;\r\n  return pickedPaletteItem;\r\n}\r\n\r\nfunction clearPalette(that, inner) {\r\n  inner(that).paletteIdx = 0;\r\n  inner(that).paletteNameMap = {};\r\n}\r\n\r\nexport { PaletteMixin };"]},"metadata":{},"sourceType":"module"}