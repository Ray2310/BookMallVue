{"ast":null,"code":"import _typeof from \"D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/qingge-Market/qingge-vue/vue/node_modules/@babel/runtime/helpers/esm/typeof.js\";\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\n\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\n\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\nimport { parseDate, numericToNumber } from '../../util/number.js';\nimport { createHashMap, trim as _trim, hasOwn, isString, isNumber } from 'zrender/lib/core/util.js';\nimport { throwError } from '../../util/log.js';\n/**\r\n * Convert raw the value in to inner value in List.\r\n *\r\n * [Performance sensitive]\r\n *\r\n * [Caution]: this is the key logic of user value parser.\r\n * For backward compatibiliy, do not modify it until have to!\r\n */\n\nexport function parseDataValue(value, // For high performance, do not omit the second param.\nopt) {\n  // Performance sensitive.\n  var dimType = opt && opt.type;\n\n  if (dimType === 'ordinal') {\n    // If given value is a category string\n    return value;\n  }\n\n  if (dimType === 'time' // spead up when using timestamp\n  && !isNumber(value) && value != null && value !== '-') {\n    value = +parseDate(value);\n  } // dimType defaults 'number'.\n  // If dimType is not ordinal and value is null or undefined or NaN or '-',\n  // parse to NaN.\n  // number-like string (like ' 123 ') can be converted to a number.\n  // where null/undefined or other string will be converted to NaN.\n\n\n  return value == null || value === '' ? NaN // If string (like '-'), using '+' parse to NaN\n  // If object, also parse to NaN\n  : +value;\n}\n;\nvar valueParserMap = createHashMap({\n  'number': function number(val) {\n    // Do not use `numericToNumber` here. We have by defualt `numericToNumber`.\n    // Here the number parser can have loose rule:\n    // enable to cut suffix: \"120px\" => 120, \"14%\" => 14.\n    return parseFloat(val);\n  },\n  'time': function time(val) {\n    // return timestamp.\n    return +parseDate(val);\n  },\n  'trim': function trim(val) {\n    return isString(val) ? _trim(val) : val;\n  }\n});\nexport function getRawValueParser(type) {\n  return valueParserMap.get(type);\n}\nvar ORDER_COMPARISON_OP_MAP = {\n  lt: function lt(lval, rval) {\n    return lval < rval;\n  },\n  lte: function lte(lval, rval) {\n    return lval <= rval;\n  },\n  gt: function gt(lval, rval) {\n    return lval > rval;\n  },\n  gte: function gte(lval, rval) {\n    return lval >= rval;\n  }\n};\n\nvar FilterOrderComparator =\n/** @class */\nfunction () {\n  function FilterOrderComparator(op, rval) {\n    if (!isNumber(rval)) {\n      var errMsg = '';\n\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'rvalue of \"<\", \">\", \"<=\", \">=\" can only be number in filter.';\n      }\n\n      throwError(errMsg);\n    }\n\n    this._opFn = ORDER_COMPARISON_OP_MAP[op];\n    this._rvalFloat = numericToNumber(rval);\n  } // Performance sensitive.\n\n\n  FilterOrderComparator.prototype.evaluate = function (lval) {\n    // Most cases is 'number', and typeof maybe 10 times faseter than parseFloat.\n    return isNumber(lval) ? this._opFn(lval, this._rvalFloat) : this._opFn(numericToNumber(lval), this._rvalFloat);\n  };\n\n  return FilterOrderComparator;\n}();\n\nvar SortOrderComparator =\n/** @class */\nfunction () {\n  /**\r\n   * @param order by defualt: 'asc'\r\n   * @param incomparable by defualt: Always on the tail.\r\n   *        That is, if 'asc' => 'max', if 'desc' => 'min'\r\n   *        See the definition of \"incomparable\" in [SORT_COMPARISON_RULE]\r\n   */\n  function SortOrderComparator(order, incomparable) {\n    var isDesc = order === 'desc';\n    this._resultLT = isDesc ? 1 : -1;\n\n    if (incomparable == null) {\n      incomparable = isDesc ? 'min' : 'max';\n    }\n\n    this._incomparable = incomparable === 'min' ? -Infinity : Infinity;\n  } // See [SORT_COMPARISON_RULE].\n  // Performance sensitive.\n\n\n  SortOrderComparator.prototype.evaluate = function (lval, rval) {\n    // Most cases is 'number', and typeof maybe 10 times faseter than parseFloat.\n    var lvalFloat = isNumber(lval) ? lval : numericToNumber(lval);\n    var rvalFloat = isNumber(rval) ? rval : numericToNumber(rval);\n    var lvalNotNumeric = isNaN(lvalFloat);\n    var rvalNotNumeric = isNaN(rvalFloat);\n\n    if (lvalNotNumeric) {\n      lvalFloat = this._incomparable;\n    }\n\n    if (rvalNotNumeric) {\n      rvalFloat = this._incomparable;\n    }\n\n    if (lvalNotNumeric && rvalNotNumeric) {\n      var lvalIsStr = isString(lval);\n      var rvalIsStr = isString(rval);\n\n      if (lvalIsStr) {\n        lvalFloat = rvalIsStr ? lval : 0;\n      }\n\n      if (rvalIsStr) {\n        rvalFloat = lvalIsStr ? rval : 0;\n      }\n    }\n\n    return lvalFloat < rvalFloat ? this._resultLT : lvalFloat > rvalFloat ? -this._resultLT : 0;\n  };\n\n  return SortOrderComparator;\n}();\n\nexport { SortOrderComparator };\n\nvar FilterEqualityComparator =\n/** @class */\nfunction () {\n  function FilterEqualityComparator(isEq, rval) {\n    this._rval = rval;\n    this._isEQ = isEq;\n    this._rvalTypeof = _typeof(rval);\n    this._rvalFloat = numericToNumber(rval);\n  } // Performance sensitive.\n\n\n  FilterEqualityComparator.prototype.evaluate = function (lval) {\n    var eqResult = lval === this._rval;\n\n    if (!eqResult) {\n      var lvalTypeof = _typeof(lval);\n\n      if (lvalTypeof !== this._rvalTypeof && (lvalTypeof === 'number' || this._rvalTypeof === 'number')) {\n        eqResult = numericToNumber(lval) === this._rvalFloat;\n      }\n    }\n\n    return this._isEQ ? eqResult : !eqResult;\n  };\n\n  return FilterEqualityComparator;\n}();\n/**\r\n * [FILTER_COMPARISON_RULE]\r\n * `lt`|`lte`|`gt`|`gte`:\r\n * + rval must be a number. And lval will be converted to number (`numericToNumber`) to compare.\r\n * `eq`:\r\n * + If same type, compare with `===`.\r\n * + If there is one number, convert to number (`numericToNumber`) to compare.\r\n * + Else return `false`.\r\n * `ne`:\r\n * + Not `eq`.\r\n *\r\n *\r\n * [SORT_COMPARISON_RULE]\r\n * All the values are grouped into three categories:\r\n * + \"numeric\" (number and numeric string)\r\n * + \"non-numeric-string\" (string that excluding numeric string)\r\n * + \"others\"\r\n * \"numeric\" vs \"numeric\": values are ordered by number order.\r\n * \"non-numeric-string\" vs \"non-numeric-string\": values are ordered by ES spec (#sec-abstract-relational-comparison).\r\n * \"others\" vs \"others\": do not change order (always return 0).\r\n * \"numeric\" vs \"non-numeric-string\": \"non-numeric-string\" is treated as \"incomparable\".\r\n * \"number\" vs \"others\": \"others\" is treated as \"incomparable\".\r\n * \"non-numeric-string\" vs \"others\": \"others\" is treated as \"incomparable\".\r\n * \"incomparable\" will be seen as -Infinity or Infinity (depends on the settings).\r\n * MEMO:\r\n *   non-numeric string sort make sence when need to put the items with the same tag together.\r\n *   But if we support string sort, we still need to avoid the misleading like `'2' > '12'`,\r\n *   So we treat \"numeric-string\" sorted by number order rather than string comparison.\r\n *\r\n *\r\n * [CHECK_LIST_OF_THE_RULE_DESIGN]\r\n * + Do not support string comparison until required. And also need to\r\n *   void the misleading of \"2\" > \"12\".\r\n * + Should avoid the misleading case:\r\n *   `\" 22 \" gte \"22\"` is `true` but `\" 22 \" eq \"22\"` is `false`.\r\n * + JS bad case should be avoided: null <= 0, [] <= 0, ' ' <= 0, ...\r\n * + Only \"numeric\" can be converted to comparable number, otherwise converted to NaN.\r\n *   See `util/number.ts#numericToNumber`.\r\n *\r\n * @return If `op` is not `RelationalOperator`, return null;\r\n */\n\n\nexport function createFilterComparator(op, rval) {\n  return op === 'eq' || op === 'ne' ? new FilterEqualityComparator(op === 'eq', rval) : hasOwn(ORDER_COMPARISON_OP_MAP, op) ? new FilterOrderComparator(op, rval) : null;\n}","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/qingge-Market/qingge-vue/node_modules/echarts/lib/data/helper/dataValueHelper.js"],"names":["parseDate","numericToNumber","createHashMap","trim","hasOwn","isString","isNumber","throwError","parseDataValue","value","opt","dimType","type","NaN","valueParserMap","val","parseFloat","getRawValueParser","get","ORDER_COMPARISON_OP_MAP","lt","lval","rval","lte","gt","gte","FilterOrderComparator","op","errMsg","process","env","NODE_ENV","_opFn","_rvalFloat","prototype","evaluate","SortOrderComparator","order","incomparable","isDesc","_resultLT","_incomparable","Infinity","lvalFloat","rvalFloat","lvalNotNumeric","isNaN","rvalNotNumeric","lvalIsStr","rvalIsStr","FilterEqualityComparator","isEq","_rval","_isEQ","_rvalTypeof","eqResult","lvalTypeof","createFilterComparator"],"mappings":"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","sourcesContent":["\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\n\r\n\r\n/**\r\n * AUTO-GENERATED FILE. DO NOT MODIFY.\r\n */\r\n\r\n/*\r\n* Licensed to the Apache Software Foundation (ASF) under one\r\n* or more contributor license agreements.  See the NOTICE file\r\n* distributed with this work for additional information\r\n* regarding copyright ownership.  The ASF licenses this file\r\n* to you under the Apache License, Version 2.0 (the\r\n* \"License\"); you may not use this file except in compliance\r\n* with the License.  You may obtain a copy of the License at\r\n*\r\n*   http://www.apache.org/licenses/LICENSE-2.0\r\n*\r\n* Unless required by applicable law or agreed to in writing,\r\n* software distributed under the License is distributed on an\r\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n* KIND, either express or implied.  See the License for the\r\n* specific language governing permissions and limitations\r\n* under the License.\r\n*/\r\nimport { parseDate, numericToNumber } from '../../util/number.js';\r\nimport { createHashMap, trim, hasOwn, isString, isNumber } from 'zrender/lib/core/util.js';\r\nimport { throwError } from '../../util/log.js';\r\n/**\r\n * Convert raw the value in to inner value in List.\r\n *\r\n * [Performance sensitive]\r\n *\r\n * [Caution]: this is the key logic of user value parser.\r\n * For backward compatibiliy, do not modify it until have to!\r\n */\r\n\r\nexport function parseDataValue(value, // For high performance, do not omit the second param.\r\nopt) {\r\n  // Performance sensitive.\r\n  var dimType = opt && opt.type;\r\n\r\n  if (dimType === 'ordinal') {\r\n    // If given value is a category string\r\n    return value;\r\n  }\r\n\r\n  if (dimType === 'time' // spead up when using timestamp\r\n  && !isNumber(value) && value != null && value !== '-') {\r\n    value = +parseDate(value);\r\n  } // dimType defaults 'number'.\r\n  // If dimType is not ordinal and value is null or undefined or NaN or '-',\r\n  // parse to NaN.\r\n  // number-like string (like ' 123 ') can be converted to a number.\r\n  // where null/undefined or other string will be converted to NaN.\r\n\r\n\r\n  return value == null || value === '' ? NaN // If string (like '-'), using '+' parse to NaN\r\n  // If object, also parse to NaN\r\n  : +value;\r\n}\r\n;\r\nvar valueParserMap = createHashMap({\r\n  'number': function (val) {\r\n    // Do not use `numericToNumber` here. We have by defualt `numericToNumber`.\r\n    // Here the number parser can have loose rule:\r\n    // enable to cut suffix: \"120px\" => 120, \"14%\" => 14.\r\n    return parseFloat(val);\r\n  },\r\n  'time': function (val) {\r\n    // return timestamp.\r\n    return +parseDate(val);\r\n  },\r\n  'trim': function (val) {\r\n    return isString(val) ? trim(val) : val;\r\n  }\r\n});\r\nexport function getRawValueParser(type) {\r\n  return valueParserMap.get(type);\r\n}\r\nvar ORDER_COMPARISON_OP_MAP = {\r\n  lt: function (lval, rval) {\r\n    return lval < rval;\r\n  },\r\n  lte: function (lval, rval) {\r\n    return lval <= rval;\r\n  },\r\n  gt: function (lval, rval) {\r\n    return lval > rval;\r\n  },\r\n  gte: function (lval, rval) {\r\n    return lval >= rval;\r\n  }\r\n};\r\n\r\nvar FilterOrderComparator =\r\n/** @class */\r\nfunction () {\r\n  function FilterOrderComparator(op, rval) {\r\n    if (!isNumber(rval)) {\r\n      var errMsg = '';\r\n\r\n      if (process.env.NODE_ENV !== 'production') {\r\n        errMsg = 'rvalue of \"<\", \">\", \"<=\", \">=\" can only be number in filter.';\r\n      }\r\n\r\n      throwError(errMsg);\r\n    }\r\n\r\n    this._opFn = ORDER_COMPARISON_OP_MAP[op];\r\n    this._rvalFloat = numericToNumber(rval);\r\n  } // Performance sensitive.\r\n\r\n\r\n  FilterOrderComparator.prototype.evaluate = function (lval) {\r\n    // Most cases is 'number', and typeof maybe 10 times faseter than parseFloat.\r\n    return isNumber(lval) ? this._opFn(lval, this._rvalFloat) : this._opFn(numericToNumber(lval), this._rvalFloat);\r\n  };\r\n\r\n  return FilterOrderComparator;\r\n}();\r\n\r\nvar SortOrderComparator =\r\n/** @class */\r\nfunction () {\r\n  /**\r\n   * @param order by defualt: 'asc'\r\n   * @param incomparable by defualt: Always on the tail.\r\n   *        That is, if 'asc' => 'max', if 'desc' => 'min'\r\n   *        See the definition of \"incomparable\" in [SORT_COMPARISON_RULE]\r\n   */\r\n  function SortOrderComparator(order, incomparable) {\r\n    var isDesc = order === 'desc';\r\n    this._resultLT = isDesc ? 1 : -1;\r\n\r\n    if (incomparable == null) {\r\n      incomparable = isDesc ? 'min' : 'max';\r\n    }\r\n\r\n    this._incomparable = incomparable === 'min' ? -Infinity : Infinity;\r\n  } // See [SORT_COMPARISON_RULE].\r\n  // Performance sensitive.\r\n\r\n\r\n  SortOrderComparator.prototype.evaluate = function (lval, rval) {\r\n    // Most cases is 'number', and typeof maybe 10 times faseter than parseFloat.\r\n    var lvalFloat = isNumber(lval) ? lval : numericToNumber(lval);\r\n    var rvalFloat = isNumber(rval) ? rval : numericToNumber(rval);\r\n    var lvalNotNumeric = isNaN(lvalFloat);\r\n    var rvalNotNumeric = isNaN(rvalFloat);\r\n\r\n    if (lvalNotNumeric) {\r\n      lvalFloat = this._incomparable;\r\n    }\r\n\r\n    if (rvalNotNumeric) {\r\n      rvalFloat = this._incomparable;\r\n    }\r\n\r\n    if (lvalNotNumeric && rvalNotNumeric) {\r\n      var lvalIsStr = isString(lval);\r\n      var rvalIsStr = isString(rval);\r\n\r\n      if (lvalIsStr) {\r\n        lvalFloat = rvalIsStr ? lval : 0;\r\n      }\r\n\r\n      if (rvalIsStr) {\r\n        rvalFloat = lvalIsStr ? rval : 0;\r\n      }\r\n    }\r\n\r\n    return lvalFloat < rvalFloat ? this._resultLT : lvalFloat > rvalFloat ? -this._resultLT : 0;\r\n  };\r\n\r\n  return SortOrderComparator;\r\n}();\r\n\r\nexport { SortOrderComparator };\r\n\r\nvar FilterEqualityComparator =\r\n/** @class */\r\nfunction () {\r\n  function FilterEqualityComparator(isEq, rval) {\r\n    this._rval = rval;\r\n    this._isEQ = isEq;\r\n    this._rvalTypeof = typeof rval;\r\n    this._rvalFloat = numericToNumber(rval);\r\n  } // Performance sensitive.\r\n\r\n\r\n  FilterEqualityComparator.prototype.evaluate = function (lval) {\r\n    var eqResult = lval === this._rval;\r\n\r\n    if (!eqResult) {\r\n      var lvalTypeof = typeof lval;\r\n\r\n      if (lvalTypeof !== this._rvalTypeof && (lvalTypeof === 'number' || this._rvalTypeof === 'number')) {\r\n        eqResult = numericToNumber(lval) === this._rvalFloat;\r\n      }\r\n    }\r\n\r\n    return this._isEQ ? eqResult : !eqResult;\r\n  };\r\n\r\n  return FilterEqualityComparator;\r\n}();\r\n/**\r\n * [FILTER_COMPARISON_RULE]\r\n * `lt`|`lte`|`gt`|`gte`:\r\n * + rval must be a number. And lval will be converted to number (`numericToNumber`) to compare.\r\n * `eq`:\r\n * + If same type, compare with `===`.\r\n * + If there is one number, convert to number (`numericToNumber`) to compare.\r\n * + Else return `false`.\r\n * `ne`:\r\n * + Not `eq`.\r\n *\r\n *\r\n * [SORT_COMPARISON_RULE]\r\n * All the values are grouped into three categories:\r\n * + \"numeric\" (number and numeric string)\r\n * + \"non-numeric-string\" (string that excluding numeric string)\r\n * + \"others\"\r\n * \"numeric\" vs \"numeric\": values are ordered by number order.\r\n * \"non-numeric-string\" vs \"non-numeric-string\": values are ordered by ES spec (#sec-abstract-relational-comparison).\r\n * \"others\" vs \"others\": do not change order (always return 0).\r\n * \"numeric\" vs \"non-numeric-string\": \"non-numeric-string\" is treated as \"incomparable\".\r\n * \"number\" vs \"others\": \"others\" is treated as \"incomparable\".\r\n * \"non-numeric-string\" vs \"others\": \"others\" is treated as \"incomparable\".\r\n * \"incomparable\" will be seen as -Infinity or Infinity (depends on the settings).\r\n * MEMO:\r\n *   non-numeric string sort make sence when need to put the items with the same tag together.\r\n *   But if we support string sort, we still need to avoid the misleading like `'2' > '12'`,\r\n *   So we treat \"numeric-string\" sorted by number order rather than string comparison.\r\n *\r\n *\r\n * [CHECK_LIST_OF_THE_RULE_DESIGN]\r\n * + Do not support string comparison until required. And also need to\r\n *   void the misleading of \"2\" > \"12\".\r\n * + Should avoid the misleading case:\r\n *   `\" 22 \" gte \"22\"` is `true` but `\" 22 \" eq \"22\"` is `false`.\r\n * + JS bad case should be avoided: null <= 0, [] <= 0, ' ' <= 0, ...\r\n * + Only \"numeric\" can be converted to comparable number, otherwise converted to NaN.\r\n *   See `util/number.ts#numericToNumber`.\r\n *\r\n * @return If `op` is not `RelationalOperator`, return null;\r\n */\r\n\r\n\r\nexport function createFilterComparator(op, rval) {\r\n  return op === 'eq' || op === 'ne' ? new FilterEqualityComparator(op === 'eq', rval) : hasOwn(ORDER_COMPARISON_OP_MAP, op) ? new FilterOrderComparator(op, rval) : null;\r\n}"]},"metadata":{},"sourceType":"module"}