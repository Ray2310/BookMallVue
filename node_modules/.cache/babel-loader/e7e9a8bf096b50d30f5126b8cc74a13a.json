{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Path from '../Path.js';\nimport { subPixelOptimizeLine } from '../helper/subPixelOptimize.js';\nvar subPixelOptimizeOutputShape = {};\n\nvar LineShape = function () {\n  function LineShape() {\n    this.x1 = 0;\n    this.y1 = 0;\n    this.x2 = 0;\n    this.y2 = 0;\n    this.percent = 1;\n  }\n\n  return LineShape;\n}();\n\nexport { LineShape };\n\nvar Line = function (_super) {\n  __extends(Line, _super);\n\n  function Line(opts) {\n    return _super.call(this, opts) || this;\n  }\n\n  Line.prototype.getDefaultStyle = function () {\n    return {\n      stroke: '#000',\n      fill: null\n    };\n  };\n\n  Line.prototype.getDefaultShape = function () {\n    return new LineShape();\n  };\n\n  Line.prototype.buildPath = function (ctx, shape) {\n    var x1;\n    var y1;\n    var x2;\n    var y2;\n\n    if (this.subPixelOptimize) {\n      var optimizedShape = subPixelOptimizeLine(subPixelOptimizeOutputShape, shape, this.style);\n      x1 = optimizedShape.x1;\n      y1 = optimizedShape.y1;\n      x2 = optimizedShape.x2;\n      y2 = optimizedShape.y2;\n    } else {\n      x1 = shape.x1;\n      y1 = shape.y1;\n      x2 = shape.x2;\n      y2 = shape.y2;\n    }\n\n    var percent = shape.percent;\n\n    if (percent === 0) {\n      return;\n    }\n\n    ctx.moveTo(x1, y1);\n\n    if (percent < 1) {\n      x2 = x1 * (1 - percent) + x2 * percent;\n      y2 = y1 * (1 - percent) + y2 * percent;\n    }\n\n    ctx.lineTo(x2, y2);\n  };\n\n  Line.prototype.pointAt = function (p) {\n    var shape = this.shape;\n    return [shape.x1 * (1 - p) + shape.x2 * p, shape.y1 * (1 - p) + shape.y2 * p];\n  };\n\n  return Line;\n}(Path);\n\nLine.prototype.type = 'line';\nexport default Line;","map":{"version":3,"sources":["D:/Work/WorkSpace/GitWorkSpace/TenShop/resource/ElectronicMall/src/qingge-Market/qingge-vue/node_modules/zrender/lib/graphic/shape/Line.js"],"names":["__extends","Path","subPixelOptimizeLine","subPixelOptimizeOutputShape","LineShape","x1","y1","x2","y2","percent","Line","_super","opts","call","prototype","getDefaultStyle","stroke","fill","getDefaultShape","buildPath","ctx","shape","subPixelOptimize","optimizedShape","style","moveTo","lineTo","pointAt","p","type"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\r\nimport Path from '../Path.js';\r\nimport { subPixelOptimizeLine } from '../helper/subPixelOptimize.js';\r\nvar subPixelOptimizeOutputShape = {};\r\nvar LineShape = (function () {\r\n    function LineShape() {\r\n        this.x1 = 0;\r\n        this.y1 = 0;\r\n        this.x2 = 0;\r\n        this.y2 = 0;\r\n        this.percent = 1;\r\n    }\r\n    return LineShape;\r\n}());\r\nexport { LineShape };\r\nvar Line = (function (_super) {\r\n    __extends(Line, _super);\r\n    function Line(opts) {\r\n        return _super.call(this, opts) || this;\r\n    }\r\n    Line.prototype.getDefaultStyle = function () {\r\n        return {\r\n            stroke: '#000',\r\n            fill: null\r\n        };\r\n    };\r\n    Line.prototype.getDefaultShape = function () {\r\n        return new LineShape();\r\n    };\r\n    Line.prototype.buildPath = function (ctx, shape) {\r\n        var x1;\r\n        var y1;\r\n        var x2;\r\n        var y2;\r\n        if (this.subPixelOptimize) {\r\n            var optimizedShape = subPixelOptimizeLine(subPixelOptimizeOutputShape, shape, this.style);\r\n            x1 = optimizedShape.x1;\r\n            y1 = optimizedShape.y1;\r\n            x2 = optimizedShape.x2;\r\n            y2 = optimizedShape.y2;\r\n        }\r\n        else {\r\n            x1 = shape.x1;\r\n            y1 = shape.y1;\r\n            x2 = shape.x2;\r\n            y2 = shape.y2;\r\n        }\r\n        var percent = shape.percent;\r\n        if (percent === 0) {\r\n            return;\r\n        }\r\n        ctx.moveTo(x1, y1);\r\n        if (percent < 1) {\r\n            x2 = x1 * (1 - percent) + x2 * percent;\r\n            y2 = y1 * (1 - percent) + y2 * percent;\r\n        }\r\n        ctx.lineTo(x2, y2);\r\n    };\r\n    Line.prototype.pointAt = function (p) {\r\n        var shape = this.shape;\r\n        return [\r\n            shape.x1 * (1 - p) + shape.x2 * p,\r\n            shape.y1 * (1 - p) + shape.y2 * p\r\n        ];\r\n    };\r\n    return Line;\r\n}(Path));\r\nLine.prototype.type = 'line';\r\nexport default Line;\r\n"]},"metadata":{},"sourceType":"module"}